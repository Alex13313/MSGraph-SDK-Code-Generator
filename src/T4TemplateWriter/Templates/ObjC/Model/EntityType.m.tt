<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="Shared.template.tt"#>

<#
var entity = host.CurrentType.AsOdcmClass();
#>

#import "<#=prefix#>Models.h"

<#=writer.GetImplementationDoc(prefix + entity.Name)#>
@implementation <#=prefix + entity.Name#>	

@synthesize odataType = _odataType;
<#
foreach(var prop in entity.Properties)
{
#>
@synthesize <#=writer.GetName(prop.Name)#> = _<#=writer.GetName(prop.Name)#>;
<#
}
#>

- (instancetype)init {

	if (self = [super init]) {

		_odataType = @"#<#=model.GetNamespace()#>.<#=entity.Name#>";
    }

	return self;
}

<#
foreach(var prop in entity.Properties)
{
	if(prop.Type is OdcmEnum && !prop.IsCollection){

		var enumProp = host.CurrentModel.GetEnumTypes().First(e=> e.Name == prop.Type.Name);
#>
- (void)set<#=prop.Name#>String:(NSString *)value {
<#
		for(var i=1; i <= enumProp.Members.Count; i++)
		{

			string value = enumProp.Members[i -1].Name;

#>

	if ([value isEqualToString:@"<#=value#>"]) {
		
		_<#=prop.Name#> = <#=prefix + "_" + prop.Type.Name + "_" + value#>;
        [self valueChanged:<#=prefix + "_" + prop.Type.Name + "_" + value#> forProperty:@"<#=GetName(prop.Name)#>"];
	}
<#
		}
#>
}
<#
	}else{
    string setterName =  Char.ToUpperInvariant(prop.Name[0]) + prop.Name.Substring(1);
    #>

    - (void)set<#=setterName#>:(<#=prop.ToSetterTypeString()#>)  <#=GetName(prop.Name)#>;
      {
        _<#=GetName(prop.Name)#> =  <#=GetName(prop.Name)#>;
        [self valueChanged:<#=GetName(prop.Name)#> forProperty:@"<#=GetName(prop.Name)#>"];
      }
    <#
    }
}

#>
@end