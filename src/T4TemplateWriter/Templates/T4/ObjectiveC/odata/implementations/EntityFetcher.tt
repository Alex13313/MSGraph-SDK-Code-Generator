<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="BaseTemplate.tt"#>
<#@ output extension="\\" #>
<#=GetCommentHeader()#>
<#
CustomHost host = (CustomHost)Host;

OdcmModel model = host.Model;

var entity = host.OdcmType.AsOdcmClass();
var entityName = GetPrefix() + entity.Name;

#>

#import "<#=GetPrefix()#>ODataEntities.h"

@implementation <#=entityName#>Fetcher

@synthesize operations = _operations;

- (instancetype)initWithUrl:(NSString *)urlComponent parent:(id<MSODataExecutable>)parent {

    self = [super initWithUrl:urlComponent parent:parent asClass:[<#=entityName#> class]];

    _operations = [[<#=entityName#>Operations alloc] initOperationWithUrl:urlComponent parent:parent];
    
    return self;
}

- (NSURLSessionTask *)update<#=entity.Name#>:(id)entity withCallback:(void (^)(<#=GetPrefix() + entity.Name#> *<#=entity.Name.ToLowerFirstChar()#>, MSODataException *exception))callback {

	return [super updateEntity:entity withCallback:callback];
}

- (NSURLSessionTask *)delete<#=entity.Name#>:(void (^)(int status, MSODataException *exception))callback {

	return [super deleteWithCallback:callback];
}

<#

foreach(var prop in entity.NavigationProperties())
{
	if(prop.IsCollection())
	{
#>
- (<#=GetPrefix() + prop.Type.Name#>CollectionFetcher *)get<#=prop.Name#> {

    return [[<#=GetPrefix() + prop.Type.Name#>CollectionFetcher alloc] initWithUrl:@"<#=prop.Name#>" parent:self asClass:[<#=GetPrefix() + prop.Type.Name#> class]];
}

- (id<<#=GetPrefix() + prop.Type.Name#>Fetcher>)get<#=prop.Name#>ById:(NSString *)_id {

    return [[[<#=GetPrefix() + prop.Type.Name#>CollectionFetcher alloc] initWithUrl:@"<#=prop.Name#>" parent:self asClass:[<#=GetPrefix() + prop.Type.Name#> class]] getById:_id];
}
<#
	}
	else
	{
#>
- (<#=GetPrefix() + prop.Type.Name#>Fetcher *) get<#=prop.Name#> {

	 return [[<#=GetPrefix() + prop.Type.Name#>Fetcher alloc] initWithUrl:@"<#=prop.Name#>" parent:self asClass:[<#=GetPrefix() + prop.Type.Name#> class]];
}
<#		
			
	}
}

foreach(var child in entity.Derived)
{
#>
- (<#=GetPrefix() + child.Name#>Fetcher *)as<#=child.Name#> {

	return [[<#=GetPrefix() +child.Name#>Fetcher alloc] initWithUrl:self.urlComponent parent:self asClass:[<#=GetPrefix() + child.Name#> class]];
}
<#

}
#>

@end