<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License.txt in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="BaseModel.template.tt"#>
<#@ output extension="\\" #>
<#host.TemplateName = BaseTypeRequest(c);#>
<#=writer.WriteHeader()#>
<#=CreatePackageDef(host)#>

<# var useAsyncMonitor = c.AsOdcmMethod().LongDescriptionContains("async"); #>
<#=CreateClassDef(BaseTypeRequest(c),  "BaseRequest", IBaseTypeRequest(c))#>
    protected final <#=TypeBody(c)#> mBody;

    /**
     * The request for this <#=TypeName(c)#>
     *
     * @param requestUrl The request url
     * @param client The service client
     * @param options The options for this request
     */
    public <#=BaseTypeRequest(c)#>(final String requestUrl, final <#=IBaseClientType()#> client, final List<Option> options<#=MethodParametersSignature(c)#>) {
<# if (useAsyncMonitor) { #>
        super(requestUrl, client, options, AsyncMonitorLocation.class);
<# } else { #>
        super(requestUrl, client, options, <#=ReturnType(c)#>.class);
<# } #>
        mBody = new <#=TypeBody(c)#>();
<# foreach (var p in c.AsOdcmMethod().Parameters) { #>
        mBody.<#=ParamName(p)#> = <#=ParamName(p)#>;
<# } #>
<# if (useAsyncMonitor) { #>
        addHeader("Prefer", "respond-async");
<# } #>
    }

<# if (useAsyncMonitor) { #>
    public void create(final ICallback<AsyncMonitor<<#=ReturnType(c)#>>> callback) {
        getClient().getExecutors().performOnBackground(new Runnable() {
            @Override
            public void run() {
                try {
                    getClient().getExecutors().performOnForeground(create(), callback);
                } catch (final ClientException e) {
                    getClient().getExecutors().performOnForeground(e, callback);
                }
            }
        });
    }

    public AsyncMonitor<<#=ReturnType(c)#>> create() throws ClientException {
        final AsyncMonitorLocation monitorLocation = send(HttpMethod.POST, mBody);

        return new AsyncMonitor<>(getClient(), monitorLocation, new ResultGetter<<#=ReturnType(c)#>>() {
            @Override
            public <#=ReturnType(c)#> getResultFrom(final String resourceUrl, final IOneDriveClient client) {
                return new <#=ReturnType(c)#>Request(resourceUrl, client, /* options */ null).get();
            }
        });
    }
<# } else { #>
    public void create(final ICallback<<#=ReturnType(c)#>> callback) {
        send(HttpMethod.POST, callback, mBody);
    }

    public <#=ReturnType(c)#> create() throws ClientException {
        return send(HttpMethod.POST, mBody);
    }
<# } #>

    public <#=ITypeRequest(c)#> select(final String value) {
        getQueryOptions().add(new QueryOption("select", value));
        return (<#=TypeRequest(c)#>)this;
    }

    public <#=ITypeRequest(c)#> top(final int value) {
        getQueryOptions().add(new QueryOption("top", value+""));
        return (<#=TypeRequest(c)#>)this;
    }

    public <#=ITypeRequest(c)#> expand(final String value) {
        getQueryOptions().add(new QueryOption("expand", value));
        return (<#=TypeRequest(c)#>)this;
    }
}
