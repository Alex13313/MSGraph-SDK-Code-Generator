<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="BaseModel.template.tt"#>
<#@ output extension="\\" #>
<#host.TemplateName = BaseTypeCollectionReferenceRequest(c);#>
<#=writer.WriteHeader()#>
<#=CreatAutogeneratedWarning()#>
<#=CreatePackageDef(host)#>

<#=CreateClassDef(BaseTypeCollectionReferenceRequest(c), "BaseCollectionRequest" + CollectionRequestGeneric(c), IBaseTypeCollectionReferenceRequest(c))#>

    /**
     * The request builder for this collection of <#=TypeName(c)#>
     *
     * @param requestUrl The request url
     * @param client The service client
     * @param options The options for this request
     */
    public <#=BaseTypeCollectionReferenceRequest(c)#>(final String requestUrl, <#=IBaseClientType()#> client, final List<Option> options) {
        super(requestUrl, client, options, <#=BaseTypeCollectionResponse(c)#>.class, <#=ITypeCollectionPage(c)#>.class);
    }

    //TODO: Add the add method

    public <#=ITypeCollectionReferenceRequest(c)#> select(final String value) {
        addQueryOption(new QueryOption("select", value));
        return (<#=TypeCollectionReferenceRequest(c)#>)this;
    }

    public <#=ITypeCollectionReferenceRequest(c)#> top(final int value) {
        addQueryOption(new QueryOption("top", value + ""));
        return (<#=TypeCollectionReferenceRequest(c)#>)this;
    }

    /*
    public <#=ITypeCollectionPage(c)#> buildFromResponse(final <#=BaseTypeCollectionResponse(c)#> response) {
        final <#=ITypeCollectionRequestBuilder(c)#> builder;
        if (response.nextLink != null) {
            builder = new <#=TypeCollectionRequestBuilder(c)#>(response.nextLink, getBaseRequest().getClient(), /* options *//* null);
        } else {
            builder = null;
        }
        final <#=TypeCollectionPage(c)#> page = new <#=TypeCollectionPage(c)#>(response, builder);
        page.setRawObject(response.getSerializer(), response.getRawObject());
        return page;
    }
    */
}
