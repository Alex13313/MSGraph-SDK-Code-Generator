<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="BaseModel.template.tt"#>
<#@ output extension="\\" #>
<#
    OdcmProperty current = (OdcmProperty)currentType;
    var currentName = current.Name.ToUpperFirstChar();
    var currentTypeName = current.Type.Name.ToUpperFirstChar();
    var responseType = currentName + "CollectionResponse";
    var collectionPageType = currentName + "CollectionPage";
    var collectionRequest = currentName + "CollectionRequest";
    var collectionRequestBuilder = currentName + "CollectionRequestBuilder";
#>
<#=writer.WriteHeader()#>
<#=CreatePackageDef(host)#>

/**
 * I am generated by IIBase<#=currentName#>CollectionRequest.java.tt
 */
 <#=CreateClassDef("Base" + collectionRequest, "BaseCollectionRequest<I" + collectionPageType + ", "  + responseType + ">", "IBase" + collectionRequest)#>
     public Base<#=currentName#>CollectionRequest(final String requestUrl, IOneDriveClient client, final List<Option> options) {
         super(requestUrl, client, options, <#=responseType#>.class, <#=collectionPageType#>.class);
     }

     public void get(final ICallback<I<#=collectionPageType#>> callback) {
         this.send(callback);
     }

     public I<#=collectionPageType#> get() throws OneDriveClientException {
         final <#=responseType#> response = this.send();
         return this.send(buildFromResponse(response));
     }

     public I<#=currentName#>CollectionRequest expand(final String value) {
         addQueryOption(new QueryOption("expand", value));
         return (<#=currentName#>CollectionRequest)this;
     }

     public I<#=currentName#>CollectionRequest select(final String value) {
           addQueryOption(new QueryOption("select", value));
           return (<#=currentName#>CollectionRequest)this;
     }

     public I<#=currentName#>CollectionRequest top(final int value) {
         addQueryOption(new QueryOption("top", value + ""));
         return (<#=currentName#>CollectionRequest)this;
     }

   public I<#=collectionPageType#> buildFromResponse(final <#=responseType#> response) {
      final <#=collectionRequestBuilder#> builder;
      if (response.nextLink != null) {
         builder = new <#=collectionRequestBuilder#>(response.nextLink, mBaseRequest.mClient, mBaseRequest.getOptions());
      } else {
         builder = null;
      }
      return new <#=collectionPageType#>(response, builder);
     }
}
