<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="BaseModel.template.tt"#>
<#@ output extension="\\" #>
<#
    OdcmProperty current = (OdcmProperty)currentType;
    var currentName = current.Name.ToUpperFirstChar();
    var currentTypeName = current.Type.Name.ToUpperFirstChar();
    var responseType = currentName + "CollectionResponse";
    var collectionPageType = currentName + "CollectionPage";
    var collectionRequest = currentName + "CollectionRequest";
    var collectionRequestBuilder = currentName + "CollectionRequestBuilder";
#>
<#=writer.WriteHeader()#>
<#=CreatePackageDef(host)#>

<#=CreateClassDef("Base" + collectionRequest, "BaseCollectionRequest<" + responseType + ", I"  + collectionPageType + ">", "IBase" + collectionRequest)#>
    public Base<#=currentName#>CollectionRequest(final String requestUrl, IOneDriveClient client, final List<Option> options) {
        super(requestUrl, client, options, <#=responseType#>.class, I<#=collectionPageType#>.class);
    }

<# if (current.LongDescriptionContains("enumerable")) { #>
    public void get(final ICallback<I<#=collectionPageType#>> callback) {
        final IExecutors executors = getBaseRequest().getClient().getExecutors();
        executors.performOnBackground(new Runnable() {
           @Override
           public void run() {
                try {
                    executors.performOnForeground(get(), callback);
                } catch (final ClientException e) {
                    executors.performOnForeground(e, callback);
                }
           }
        });
    }

    public I<#=collectionPageType#> get() throws ClientException {
        final <#=responseType#> response = send();
        return buildFromResponse(response);
    }

<# } #>
<# if (current.LongDescriptionContains("writable")) { #>
    public void create(final String fileName, final byte[] fileContents, final ICallback<<#=currentTypeName#>> callback) {
        final IExecutors executors = getBaseRequest().getClient().getExecutors();
        executors.performOnBackground(new Runnable() {
           @Override
           public void run() {
                try {
                    executors.performOnForeground(create(fileName, fileContents), callback);
                } catch (final ClientException e) {
                    executors.performOnForeground(e, callback);
                }
           }
        });
    }

    public <#=currentTypeName#> create(final String fileName, final byte[] fileContents) throws ClientException {
        final String requestUrl = getBaseRequest().getRequestUrl() + "/" + fileName;
        return new ItemRequestBuilder(requestUrl, getBaseRequest().getClient(), /* Options */ null)
            .getContent()
            .buildRequest()
            .put(fileContents);
    }

    public void create(final <#=currentTypeName#> new<#=currentTypeName#>, final ICallback<<#=currentTypeName#>> callback) {
        final IExecutors executors = getBaseRequest().getClient().getExecutors();
        executors.performOnBackground(new Runnable() {
           @Override
           public void run() {
                try {
                    executors.performOnForeground(create(new<#=currentTypeName#>), callback);
                } catch (final ClientException e) {
                    executors.performOnForeground(e, callback);
                }
           }
        });
    }

    public <#=currentTypeName#> create(final <#=currentTypeName#> new<#=currentTypeName#>) throws ClientException {
        final String requestUrl = getBaseRequest().getRequestUrl().toString();
        return new ItemRequestBuilder(requestUrl, getBaseRequest().getClient(), /* Options */ null)
            .buildRequest()
            .create(new<#=currentTypeName#>);
    }

<# } #>
    public I<#=currentName#>CollectionRequest expand(final String value) {
        addQueryOption(new QueryOption("expand", value));
        return (<#=currentName#>CollectionRequest)this;
    }

    public I<#=currentName#>CollectionRequest select(final String value) {
        addQueryOption(new QueryOption("select", value));
        return (<#=currentName#>CollectionRequest)this;
    }

    public I<#=currentName#>CollectionRequest top(final int value) {
        addQueryOption(new QueryOption("top", value + ""));
        return (<#=currentName#>CollectionRequest)this;
    }

    public I<#=collectionPageType#> buildFromResponse(final <#=responseType#> response) {
        final <#=collectionRequestBuilder#> builder;
        if (response.nextLink != null) {
            builder = new <#=collectionRequestBuilder#>(response.nextLink, getBaseRequest().getClient(), getBaseRequest().getOptions());
        } else {
            builder = null;
        }
        return new <#=collectionPageType#>(response, builder);
    }
}
