<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="BaseModel.template.tt"#>
<#@ output extension="\\" #>
<#=writer.WriteHeader()#>
<#=CreatePackageDef(host)#>

<#=CreateClassDef(BaseTypeRequestBuilder(c), "BaseRequestBuilder", IBaseTypeRequestBuilder(c))#>

    /**
     * The request builder for the <#=TypeName(c)#>
     *
     * @param requestUrl The request url
     * @param client The service client
     * @param options The options for this request
     */
    public <#=BaseTypeRequestBuilder(c)#>(final String requestUrl, final <#=IClientType(c)#> client, final List<Option> options) {
        super(requestUrl, client, options);
    }

    /**
     * Creates the request
     */
    public <#=ITypeRequest(c)#> buildRequest() {
        return buildRequest(getOptions());
    }

    /**
     * Creates the request with specific options instead of the existing options
     */
    public <#=ITypeRequest(c)#> buildRequest(final List<Option> options) {
        return new <#=TypeRequest(c)#>(getRequestUrl(), getClient(), options);
    }
<#
if (c.AsOdcmClass() != null)
{
    foreach(var child in c.AsOdcmClass().Derived)
    {
        var childName = child.Name.ToCheckedCase();
#>

    /// <summary>
    /// Gets the request builder for <#=childName#>.
    /// </summary>
    /// <returns>The <see cref="I<#=childName#>RequestBuilder"/>.</returns>
    public <#=ITypeRequestBuilder(child)#> <#=childName.ToLowerFirstChar()#>() {
        return new <#=TypeRequestBuilder(child)#>(getRequestUrlWithAdditionalSegment("<#=child.Name#>"), null);
    }
<#
    }
}
#>
<#
if (c.AsOdcmClass() != null)
{
    foreach(var prop in c.AsOdcmClass().NavigationProperties())
    {
        var propName = prop.Name.ToUpperFirstChar();
        var propRequestBuilder = TypeRequestBuilder(prop);
#>

    /// <summary>
    /// Gets the request builder for <#=TypeName(prop)#>.
    /// </summary>
    /// <returns>The <see cref="<#=ITypeCollectionRequestBuilder(c)#>"/>.</returns>
    public <#=ITypeCollectionRequestBuilder(prop)#> get<#=propName#>() {
        return new <#=TypeCollectionRequestBuilder(prop)#>(getRequestUrlWithAdditionalSegment("<#=prop.Name#>"), getClient(), null);
    }

    /**
     * Gets the request builder for <#=TypeName(prop)#>.
     */
    public <#=ITypeRequestBuilder(prop)#> get<#=propName#>(final String id) {
        return new <#=TypeRequestBuilder(prop)#>(getRequestUrlWithAdditionalSegment("<#=prop.Name#>") + "/" + id, getClient(), null);
    }
<#
    }
}
#>
<#
if (c.AsOdcmClass() != null) {
	foreach (var prop in c.AsOdcmClass().GetProperties(typeName:"Stream"))
	{
		var propName = prop.Name.ToCheckedCase();
		var propRequestBuilder = TypeRequestBuilder(prop);
#>

    /// <summary>
    /// Gets the request builder for <#=propName#>.
    /// </summary>
    /// <returns>The <see cref="I<#=propRequestBuilder#>"/>.</returns>
// Entity Properties
    public I<#=propRequestBuilder#> get<#=propName#>() {
        return new <#=propRequestBuilder#>(getRequestUrlWithAdditionalSegment("<#=prop.Name#>"), getClient(), null);
    }
<#
	}
}
#>
<#
if (c.AsOdcmClass() != null)
{
foreach (var method in c.AsOdcmClass().Methods)
{
    var methodNameBase = method.Name.Substring(method.Name.IndexOf('.') + 1).ToUpperFirstChar();
    var methodName = methodNameBase.ToLowerFirstChar();
    var baseName = methodNameBase.ToUpperFirstChar();

    var paramStringBuilder = new System.Text.StringBuilder();
    var builderInitializerStringBuilder = new System.Text.StringBuilder();
    builderInitializerStringBuilder.AppendFormat("getRequestUrlWithAdditionalSegment(\"{0}\"), {1}, null", method.Name, "getClient()");
    var hasParameters = method.Parameters != null && method.Parameters.Any();

    if (hasParameters)
    {
        foreach (var param in method.Parameters)
        {
			var paramType = param.Type.GetTypeString();
			var paramName = param.Name.ToLowerFirstChar();
            paramStringBuilder.AppendFormat("final {0} {1}, ", paramType, paramName);
            builderInitializerStringBuilder.AppendFormat(", {0}", paramName);
        }

        paramStringBuilder.Remove(paramStringBuilder.Length - 2, 2);
    }
#>

    /// <summary>
    /// Gets the request builder for <#=methodName#>.
    /// </summary>
    /// <returns>The <see cref="I<#=baseName#>RequestBuilder"/>.</returns>
// Entity Methods
    public I<#=baseName#>RequestBuilder get<#=methodNameBase#>(<#=paramStringBuilder.ToString()#>) {
        return new <#=baseName#>RequestBuilder(<#=builderInitializerStringBuilder.ToString()#>);
    }
<#
}
}
#>
}
