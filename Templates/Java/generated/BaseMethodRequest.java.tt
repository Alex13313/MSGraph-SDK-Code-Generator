<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="BaseModel.template.tt"#>
<#@ output extension="\\" #>
<#
    OdcmMethod current = (OdcmMethod)currentType;
    var methodClass = current.Class.Name.ToUpperFirstChar();
    var currentName = methodClass + current.Name.Substring(current.Name.IndexOf('.') + 1).ToUpperFirstChar();
    var collectionRequest = currentName + "Request";
    var responseType = currentName + "CollectionResponse";
    var collectionPageType = currentName + "CollectionPage";
    var collectionRequestBuilder = currentName + "RequestBuilder";

    var parameterSignatureBuilder = new StringBuilder();
    var parameterValuesBuilder = new StringBuilder();
    var requestValuesBuilder = new StringBuilder();
    var collectionPageValuesBuilder = new StringBuilder();

    foreach (var param in current.Parameters)
    {
        var paramType = param.Type.GetTypeString();
        var paramName = param.Name.ToLowerFirstChar();
        var fieldName = "m" + param.Name.ToUpperFirstChar();
    	parameterSignatureBuilder.AppendFormat(", final {0} {1}", paramType, paramName);
    	parameterValuesBuilder.AppendFormat(", {0}", paramName);
        requestValuesBuilder.AppendFormat(", {0}", fieldName);
        collectionPageValuesBuilder.AppendFormat(", /* {0} */ null", paramName);
    }
#>
<#=writer.WriteHeader()#>
<#=CreatePackageDef(host)#>

<#=CreateClassDef("Base" + collectionRequest, "BaseCollectionRequest<" + responseType + ", I"  + collectionPageType + ">", "IBase" + collectionRequest)#>

    /**
     * TODO
     * @param requestUrl //TODO
     * @param client //TODO
     * @param objects //TODO
     */
    public Base<#=collectionRequest#>(final String requestUrl, final IOneDriveClient client, final List<Option> options<#=parameterSignatureBuilder.ToString()#>) {
        super(requestUrl, client, options, <#=responseType#>.class, I<#=collectionPageType#>.class);
<# foreach (var param in current.Parameters) { var paramName = param.Name.ToLowerFirstChar();#>
        if (<#=paramName#> != null) {
            addQueryOption(new QueryOption("<#=paramName#>", <#=paramName#>));
        }
<# } #>
    }

    public void get(final ICallback<I<#=collectionPageType#>> callback) {
        final IExecutors executors = getBaseRequest().getClient().getExecutors();
        executors.performOnBackground(new Runnable() {
           @Override
           public void run() {
                try {
                    executors.performOnForeground(get(), callback);
                } catch (final ClientException e) {
                    executors.performOnForeground(e, callback);
                }
           }
        });
    }

    public I<#=currentName#>CollectionPage get() throws ClientException {
        final <#=responseType#> response = send();
        return buildFromResponse(response);
    }

    public I<#=currentName#>Request select(final String value) {
        addQueryOption(new QueryOption("select", value));
        return (<#=collectionRequest#>)this;
    }

    public I<#=currentName#>Request top(final int value) {
        addQueryOption(new QueryOption("top", value+""));
        return (<#=collectionRequest#>)this;
    }

    public I<#=currentName#>Request expand(final String value) {
        addQueryOption(new QueryOption("expand", value));
        return (<#=collectionRequest#>)this;
    }

    public I<#=collectionPageType#> buildFromResponse(final <#=responseType#> response) {
        final <#=collectionRequestBuilder#> builder;
        if (response.nextLink != null) {
            builder = new <#=collectionRequestBuilder#>(response.nextLink, getBaseRequest().getClient(), getBaseRequest().getOptions()<#=collectionPageValuesBuilder.ToString()#>);
        } else {
            builder = null;
        }
        return new <#=collectionPageType#>(response, builder);
    }
}
