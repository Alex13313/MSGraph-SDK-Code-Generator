<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="BaseModel.template.tt"#>
<#@ output extension="\\" #>
<#=writer.WriteHeader()#>
<#=CreatePackageDef(host)#>

<#=CreateClassDef(BaseTypeRequest(c), "BaseCollectionRequest" + CollectionRequestGeneric(c), IBaseTypeRequest(c))#>

    /**
     * The request for this <#=TypeName(c)#>
     *
     * @param requestUrl The request url
     * @param client The service client
     * @param options The options for this request
     */
    public <#=BaseTypeRequest(c)#>(final String requestUrl, final <#=IClientType(c)#> client, final List<Option> options<#=MethodParametersSignature(c)#>) {
        super(requestUrl, client, options, <#=BaseTypeCollectionResponse(c)#>.class, <#=ITypeCollectionPage(c)#>.class);
<# foreach (var param in c.AsOdcmMethod().Parameters) { var paramName = param.Name.ToLowerFirstChar();#>
        if (<#=paramName#> != null) {
            addQueryOption(new QueryOption("<#=paramName#>", <#=paramName#>));
        }
<# } #>
    }

    public void get(final ICallback<<#=ITypeCollectionPage(c)#>> callback) {
        final IExecutors executors = getBaseRequest().getClient().getExecutors();
        executors.performOnBackground(new Runnable() {
           @Override
           public void run() {
                try {
                    executors.performOnForeground(get(), callback);
                } catch (final ClientException e) {
                    executors.performOnForeground(e, callback);
                }
           }
        });
    }

    public <#=ITypeCollectionPage(c)#> get() throws ClientException {
        final <#=BaseTypeCollectionResponse(c)#> response = send();
        return buildFromResponse(response);
    }

    public <#=ITypeRequest(c)#> select(final String value) {
        addQueryOption(new QueryOption("select", value));
        return (<#=TypeRequest(c)#>)this;
    }

    public <#=ITypeRequest(c)#> top(final int value) {
        addQueryOption(new QueryOption("top", value+""));
        return (<#=TypeRequest(c)#>)this;
    }

    public <#=ITypeRequest(c)#> expand(final String value) {
        addQueryOption(new QueryOption("expand", value));
        return (<#=TypeRequest(c)#>)this;
    }

    public <#=ITypeCollectionPage(c)#> buildFromResponse(final <#=BaseTypeCollectionResponse(c)#> response) {
        final <#=ITypeRequestBuilder(c)#> builder;
        if (response.nextLink != null) {
            builder = new <#=TypeRequestBuilder(c)#>(response.nextLink, getBaseRequest().getClient(), /* options */ null<#=MethodPageValues(c)#>);
        } else {
            builder = null;
        }
        final <#=ITypeCollectionPage(c)#> page = new <#=TypeCollectionPage(c)#>(response, builder);
        page.setRawObject(response.getSerializer(), response.getRawObject());
        return page;
    }
}
