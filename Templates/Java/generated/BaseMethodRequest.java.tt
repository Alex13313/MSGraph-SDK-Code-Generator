<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="BaseModel.template.tt"#>
<#@ output extension="\\" #>
<#host.TemplateName = BaseTypeRequest(c);#>
<#=writer.WriteHeader()#>
<#=CreatePackageDef(host)#>

<#=CreateClassDef(BaseTypeRequest(c), "BaseRequest", IBaseTypeRequest(c))#>

    /**
     * The request for this <#=TypeName(c)#>
     *
     * @param requestUrl The request url
     * @param client The service client
     * @param options The options for this request
     */
    public <#=BaseTypeRequest(c)#>(final String requestUrl, final <#=IBaseClientType()#> client, final List<Option> options<#=MethodParametersSignature(c)#>) {
        super(requestUrl, client, options, null);

<# foreach (var param in c.AsOdcmMethod().Parameters) { var paramName = param.Name.ToLowerFirstChar();#>
        if (<#=paramName#> != null) {
            //TODO:FIXME   
            //addQueryOption(new QueryOption("<#=paramName#>", <#=paramName#>));
        }
<# } #>
    }

<# if (c.AsOdcmMethod().IsAction()) { #>

<# if (c.AsOdcmMethod().ReturnType != null) { #>
    public void get(final ICallback<<#=ClassTypeName(c)#>> callback) {
        send(HttpMethod.POST, callback, null);
    }

    public <#=ClassTypeName(c)#> get() throws ClientException {
       return send(HttpMethod.POST, null);
    }

<# } else { #>
    public void get(final ICallback<Void> callback) {
        final IExecutors executors = getClient().getExecutors();
        executors.performOnBackground(new Runnable() {
           @Override
           public void run() {
                try {
                    get();
                    executors.performOnForeground((Void)null, callback);
                } catch (final ClientException e) {
                    executors.performOnForeground(e, callback);
                }
           }
        });
    }

    public void get() throws ClientException {
        this.send(HttpMethod.POST, null);
    }

<# } #>
<# } else { #>

<# if (c.AsOdcmMethod().ReturnType != null) { #>
    public void get(final ICallback<<#=ClassTypeName(c)#>> callback) {
        send(HttpMethod.GET, callback, null);
    }

    public <#=ClassTypeName(c)#> get() throws ClientException {
       return send(HttpMethod.GET, null);
    }

<# } else { #>
    public void get(final ICallback<Void> callback) {
        final IExecutors executors = getClient().getExecutors();
        executors.performOnBackground(new Runnable() {
           @Override
           public void run() {
                try {
                    get();
                    executors.performOnForeground((Void)null, callback);
                } catch (final ClientException e) {
                    executors.performOnForeground(e, callback);
                }
           }
        });
    }

    public void get() throws ClientException {
        this.send(HttpMethod.GET, null);
    }

<# } #>

<# } #>
}