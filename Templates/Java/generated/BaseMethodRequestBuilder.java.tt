<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="BaseModel.template.tt"#>
<#@ output extension="\\" #>
<#
    OdcmMethod current = (OdcmMethod)currentType;
    var methodClass = current.Class.Name.ToUpperFirstChar();
    var currentName = methodClass + current.Name.Substring(current.Name.IndexOf('.') + 1).ToUpperFirstChar();
    var clientName = "mClient";

    var parameterSignatureBuilder = new StringBuilder();
    var parameterValuesBuilder = new StringBuilder();
    var requestValuesBuilder = new StringBuilder();

    foreach (var param in current.Parameters)
    {
        var paramType = param.Type.GetTypeString();
        var paramName = param.Name.ToLowerFirstChar();
        var fieldName = "m" + param.Name.ToUpperFirstChar();
    	parameterSignatureBuilder.AppendFormat(", final {0} {1}", paramType, paramName);
    	parameterValuesBuilder.AppendFormat(", {0}", paramName);
        requestValuesBuilder.AppendFormat(", {0}", fieldName);
    }
#>
<#=writer.WriteHeader()#>
<#=CreatePackageDef(host)#>

/**
 * I am auto generated by BaseMethodRequest.java.tt
 *
 * Drive should always been referenced, and Drive extends BaseDrive
 */
<#=CreateClassDef("Base" + currentName + "RequestBuilder",  "BaseRequestBuilder")#>

<# foreach (var param in current.Parameters) { var paramType = param.Type.GetTypeString(); var fieldName = "m" + param.Name.ToUpperFirstChar();#>
    public <#=paramType#> <#=fieldName#>;
<# } #>

    public Base<#=currentName#>RequestBuilder(final String requestUrl, final IOneDriveClient client, final List<Option> options<#=parameterSignatureBuilder.ToString()#>) {
        super(requestUrl, client, options);
<# foreach (var param in current.Parameters) { var paramName = param.Name.ToLowerFirstChar(); var fieldName = "m" + param.Name.ToUpperFirstChar();#>
        <#=fieldName#> = <#=paramName#>;
<# } #>
    }

    public I<#=currentName#>Request buildRequest() {
        return buildRequest(null);
    }

    public I<#=currentName#>Request buildRequest(final List<Option> options) {
        return new <#=currentName#>Request(mRequestUrl, <#=clientName#>, options<#=requestValuesBuilder.ToString()#>);
    }
}
