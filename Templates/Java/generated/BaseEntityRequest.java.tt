<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="BaseModel.template.tt"#>
<#@ output extension="\\" #>
<#
    OdcmClass current = (OdcmClass)currentType;
    var entityName = current.Name.ToUpperFirstChar();
#>
<#=writer.WriteHeader()#>
<#=CreatePackageDef(host)#>

/**
 * I am generated by EntityRequest.java.tt (Might not be implemented)
 *
 * I extend the BaseRequest
 * I have an interface IBaseDriveRequest that is also auto generated
 * I have the full CRUD complement of functions
 * I always return a IDriveRequest object
 */
<#=CreateClassDef("Base" + entityName + "Request", "BaseRequest", "IBase" + entityName + "Request")#>
    public Base<#=entityName#>Request(String requestUrl, IOneDriveClient client, List<Option> options) {
        super(requestUrl, client, options, <#=entityName#>.class);
    }

    public Future<<#=entityName#>> get(final ICallback<<#=entityName#>> callback) {
        // Build Request
        // Send request via Http
        // Get response
        // IsSuccess?
            // deserializeResponse
            // callback.success(stuff);
        // else IsFailure
            // deserializeResponse
            // callback.failure
        return this.send(HttpMethod.GET, callback, null);
    }

    public Future<<#=entityName#>> update(final <#=entityName#> source<#=entityName#>, final ICallback<<#=entityName#>> callback) {
        // Build Request
        // Serialize sourceDrive
        // Send request via Http
        // Get response
        // IsSuccess?
            // deserializeResponse
            // callback.success(stuff);
        // else IsFailure
            // deserializeResponse
            // callback.failure
        return this.send(HttpMethod.PATCH, callback, source<#=entityName#>);
    }

    public Future<Void> delete(final <#=entityName#> source<#=entityName#>, final ICallback<Void> callback) {
        // Build Request
        // Send request via Http
        // Get response
        // IsSuccess?
            // callback.success(stuff);
        // else IsFailure
            // deserializeResponse
            // callback.failure
        return this.send(HttpMethod.DELETE, callback, null);
    }

    public Future<<#=entityName#>> create(final <#=entityName#> new<#=entityName#>, final ICallback<<#=entityName#>> callback) {
        // Build Request
        // Serialize newDrive
        // Send request via Http
        // Get response
        // IsSuccess?
            // deserializeResponse
            // callback.success(stuff);
        // else IsFailure
            // deserializeResponse
            // callback.failure
        return this.send(HttpMethod.PATCH, callback, new<#=entityName#>);
    }

    public I<#=entityName#>Request select(final String value) {
        this.mQueryOptions.add(new QueryOption("select", value));
        return (<#=entityName#>Request)this; // TODO: 'this' always needs to be cast'ed to the extension type
    }
}
