<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="BaseJavaModel.template.tt"#>
<#@ output extension="\\" #>
<#host.TemplateName = TypeCollectionReferenceRequest(c);#>
<#=writer.WriteHeader()#>
<#=CreatePackageDef(host)#>

<#=CreateClassDef(TypeCollectionReferenceRequest(c), "BaseCollectionRequest" + CollectionRequestGeneric(c), ITypeCollectionReferenceRequest(c))#>

    /**
     * The request builder for this collection of <#=TypeName(c)#>
     *
     * @param requestUrl     the request URL
     * @param client         the service client
     * @param requestOptions the options for this request
     */
    public <#=TypeCollectionReferenceRequest(c)#>(final String requestUrl, <#=IBaseClientType()#> client, final java.util.List<? extends Option> requestOptions) {
        super(requestUrl, client, requestOptions, <#=BaseTypeCollectionResponse(c)#>.class, <#=ITypeCollectionPage(c)#>.class);
    }

    public void post(final <#=TypeName(c)#> new<#=TypeName(c)#>, final ICallback<<#=TypeName(c)#>> callback) {
<#
		var navigationProperty = c.AsOdcmProperty().GetServiceCollectionNavigationPropertyForPropertyType();
		if (navigationProperty != null) {

			//Append the singleton's navigation type to the @odata.id if relevant
			var implicitNavigationProperty = string.Empty;
			if (navigationProperty.GetType() == typeof(OdcmSingleton)) 
				implicitNavigationProperty = c.AsOdcmProperty().Name + "/";

            String prop = c.AsOdcmProperty().GetServiceCollectionNavigationPropertyForPropertyType().Name;
#>
        final String requestUrl = getBaseRequest().getRequestUrl().toString();
        final ReferenceRequestBody body = new ReferenceRequestBody(getBaseRequest().getClient().getServiceRoot() + "/<#=prop#>/<#=implicitNavigationProperty#>" + new<#=TypeName(c)#>.id);
        new <#=TypeWithReferencesRequestBuilder(c)#>(requestUrl, getBaseRequest().getClient(), /* Options */ null)
            .buildRequest(getBaseRequest().getOptions())
            .post(new<#=TypeName(c)#>, body, callback);
    }

    public <#=TypeName(c)#> post(final <#=TypeName(c)#> new<#=TypeName(c)#>) throws ClientException {
        final String requestUrl = getBaseRequest().getRequestUrl().toString();
        final ReferenceRequestBody body = new ReferenceRequestBody(getBaseRequest().getClient().getServiceRoot() + "/<#=prop#>/<#=implicitNavigationProperty#>" + new<#=TypeName(c)#>.id);
        return new <#=TypeWithReferencesRequestBuilder(c)#>(requestUrl,getBaseRequest().getClient(), /* Options */ null)
                .buildRequest(getBaseRequest().getOptions())
                .post(new<#=TypeName(c)#>, body);
    }
<#     } 
#>
<# if (c.GetFeatures().CanExpand) { #>
    /**
     * Sets the expand clause for the request
     *
     * @param value the expand clause
     * @return the updated request
     */
    public <#=ITypeCollectionReferenceRequest(c)#> expand(final String value) {
        addQueryOption(new QueryOption("$expand", value));
        return (<#=TypeCollectionReferenceRequest(c)#>)this;
    }

<# } #>
<# if (c.GetFeatures().CanSelect) { #>
    /**
     * Sets the select clause for the request
     *
     * @param value the select clause
     * @return the updated request
     */
    public <#=ITypeCollectionReferenceRequest(c)#> select(final String value) {
        addQueryOption(new QueryOption("$select", value));
        return (<#=TypeCollectionReferenceRequest(c)#>)this;
    }

<# } #>
<# if (c.GetFeatures().CanUseTop) { #>
    /**
     * Sets the top value for the request
     *
     * @param value the max number of items to return
     * @return the updated request
     */
    public <#=ITypeCollectionReferenceRequest(c)#> top(final int value) {
        addQueryOption(new QueryOption("$top", value + ""));
        return (<#=TypeCollectionReferenceRequest(c)#>)this;
    }
<# } #>
}
