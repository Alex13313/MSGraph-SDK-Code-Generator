<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="BaseJavaModel.template.tt"#>
<#@ output extension="\\" #>
<#host.TemplateName = BaseTypeRequestBuilder(c);#>
<#=writer.WriteHeader()#>
<#=CreatePackageDef(host)#>
<# bool isAction = !c.AsOdcmMethod().IsFunction; #>
<#=CreateClassDef(BaseTypeRequestBuilder(c),  RequestBuilderSuperClass(c))#>

<# foreach (var method in c.AsOdcmMethod().WithOverloads()) { #>
    /**
     * The request builder for this <#=TypeName(c)#>
     *
     * @param requestUrl The request url
     * @param client The service client
     * @param requestOptions The options for this request
     */
    public <#=BaseTypeRequestBuilder(c)#>(final String requestUrl, final <#=IBaseClientType()#> client, final java.util.List<Option> requestOptions<#=MethodParametersSignature(method)#>) {
        super(requestUrl, client, requestOptions);
<#     foreach (var p in method.Parameters) { #>
<#         if (isAction) { #>
        bodyParams.put("<#=ParamName(p)#>", <#=ParamName(p)#>);
<#         } else { #>
        functionOptions.add(new FunctionOption("<#=ParamName(p)#>", <#=ParamName(p)#>));
<#         } #>
<#     } #>
    }
<# } #>

    /**
     * Creates the <#=ITypeRequest(c)#>
     *
     * @return The <#=ITypeRequest(c)#> instance
     */
    public <#=ITypeRequest(c)#> buildRequest() {
        return buildRequest(getOptions());
    }

    /**
     * Creates the <#=ITypeRequest(c)#> with specific requestOptions instead of the existing requestOptions
     *
     * @param requestOptions the options for the request
     * @return The <#=ITypeRequest(c)#> instance
     */
    public <#=ITypeRequest(c)#> buildRequest(final java.util.List<Option> requestOptions) {
        <#=TypeRequest(c)#> request = new <#=TypeRequest(c)#>(
                getRequestUrl(),
                getClient(),
                requestOptions
        );

<# if (isAction) { #>
<#   foreach (var p in c.AsOdcmMethod().Parameters) { #>
        if (hasParameter("<#=ParamName(p)#>")) {
            request.body.<#=ParamName(p)#> = getParameter("<#=ParamName(p)#>");
        }

<#   } #>
<# } else { #>
      for (FunctionOption option : functionOptions) {
            request.addFunctionOption(option);
      }

<# } #>
        return request;
    }
}
