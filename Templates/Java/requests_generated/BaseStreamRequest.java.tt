<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="BaseJavaModel.template.tt"#>
<#@ output extension="\\" #>
<#host.TemplateName = BaseTypeStreamRequest(c);#>
<#=writer.WriteHeader()#>
<#=CreatePackageDef(host)#>

import java.io.*;

<#=CreateClassDef(BaseTypeStreamRequest(c), "BaseStreamRequest<" + ClassTypeName(c) + ">", IBaseTypeStreamRequest(c))#>

    /**
     * The request for this <#=TypeName(c)#>
     *
     * @param requestUrl     the request URL
     * @param client         the service client
     * @param requestOptions the options for this request
     * @param responseClass  the class of the response
     */
    public <#=BaseTypeStreamRequest(c)#>(
                         final String requestUrl,
                         final <#=IBaseClientType()#> client,
                         final java.util.List<? extends Option> requestOptions,
                         final Class<<#=ClassTypeName(c)#>> responseClass) {
        super(requestUrl, client, requestOptions, responseClass);
    }

    /**
     * Gets the contents of this stream
     *
     * @param callback the callback to be called after success or failure
     */
    public void get(final ICallback<InputStream> callback) {
        send(callback);
    }

    /**
     * Gets the contents of this stream
     *
     * @return the stream that the caller needs to close
     * @throws ClientException an exception occurs if there was an error while the request was sent
     */
    public InputStream get() throws ClientException {
       return send();
    }

    /**
     * Uploads to the stream
     *
     * @param fileContents the contents of the stream to upload
     * @param callback the callback to be called after success or failure
     */
    public void put(final byte[] fileContents, final ICallback<<#=ClassTypeName(c)#>> callback) {
        send(fileContents, callback);
    }

    /**
     * Uploads to the stream
     *
     * @param fileContents the contents of the stream to upload
     * @return the result of the upload
     * @throws ClientException an exception occurs if there was an error while the request was sent
     */
    public <#=ClassTypeName(c)#> put(final byte[] fileContents) throws ClientException {
        return send(fileContents);
    }
}
