<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension="\\" #>
<#
    CustomT4Host host       = (CustomT4Host) Host;
    var model               = host.CurrentModel;
    CodeWriterJava writer   = (CodeWriterJava) host.CodeWriter;
    var currentType = host.CurrentType;

    if (currentType == null)
    {
        throw new InvalidOperationException("Unable to get the current type!");
    }
#>
<#+
    public string CreatePackageDef(CustomT4Host host)
    {
        var format = @"package {0}.sdk.{1};

import com.onedrive.sdk.concurrency.*;
import com.onedrive.sdk.core.*;
import com.onedrive.sdk.extensions.*;
import com.onedrive.sdk.http.*;
import com.onedrive.sdk.generated.*;
import com.onedrive.sdk.options.*;
import com.onedrive.sdk.serializer.*;

import java.util.*;";
        return string.Format(format,
            host.CurrentModel.NamespaceName(),
            host.TemplateInfo.OutputParentDirectory);
        }

    public string CreateClassDef(string name, string extends = null, string implements = null)
    {
        return this.CreateClassOrInterface(name, true, extends, implements);
    }

    public string CreateInterfaceDef(string name, string extends = null)
    {
        return this.CreateClassOrInterface(name, false, extends, null);
    }

    public string CreateClassOrInterface(string name, bool isClass = true, string extends = null, string implements = null)
    {
        var extendsStr = string.Empty;
        if (!string.IsNullOrEmpty(extends))
        {
            extendsStr = string.Format(" extends {0}", extends);
        }

        var implementsStr = string.Empty;
        if (!string.IsNullOrEmpty(implements))
        {
            implementsStr = string.Format(" implements {0}", implements);
        }

        var format = @"

/**
 * The {1} for the {0}.
 */
public {1} {2}{3}{4} {{";
        string declaration = string.Format(format,
            isClass ? name.SplitCamelCase() : name.SplitCamelCase().Remove(0, 1),
            isClass ? "class" : "interface",
            name,
            extendsStr,
            implementsStr);

        if (name.StartsWith("Base") || name.StartsWith("IBase"))
        {
            return CreatAutogeneratedWarning() + declaration;
        }

        return CreateExtensiblityMessage() + declaration;
    }

    public string CreatePropertyDef(IEnumerable<OdcmProperty> properties, bool isComplexType = false)
    {
        var sb = new StringBuilder();

        var format =
@"    /**
     * The {0}.
     */
    @SerializedName(""{1}"")
    public {2} {3};

";
        var collectionFormat =
@"    /**
     * The {0}.
     */
    @SerializedName(""{1}"")
    @Expose(serialize = false)
    public {2} {3};

";

        foreach (var property in properties.Where(p => !p.Type.Name.Equals("Stream")))
        {
            var propertyName = property.Name.ToUpperFirstChar();
            var propertyType = "";
            var propertyFormat = format;
            if (property.IsCollection)
            {
                propertyFormat = collectionFormat;
                if (isComplexType)
                {
                    propertyType = "List<" + property.GetTypeString() + ">";
                }
                else
                {
                    propertyType = property.Name.ToUpperFirstChar() + "CollectionPage";
                }
            }
            else
            {
                propertyType = property.GetTypeString();
            }

            sb.AppendFormat(propertyFormat,
                propertyName.SplitCamelCase(),
                property.Name,
                propertyType,
                property.SanitizePropertyName());
        }
        return sb.ToString();
    }

    public string CreateParameterDef(IEnumerable<OdcmParameter> parameters)
    {
        var sb = new StringBuilder();

        var format =
@"    /**
     * The {0}.
     */
    @SerializedName(""{1}"")
    public {2} {3};

";
        var collectionFormat =
@"    /**
     * The {0}.
     */
    @SerializedName(""{1}"")
    @Expose(serialize = false)
    public {2}CollectionPage {3};

        ";

        foreach (var property in parameters)
        {
            var propertyName = property.Name.ToUpperFirstChar();
            var propertyType = property.IsCollection ?  property.Name.ToUpperFirstChar() : property.GetTypeString();
            sb.AppendFormat(property.IsCollection ? collectionFormat : format,
                propertyName.SplitCamelCase(),
                property.Name,
                propertyType.ToUpperFirstChar(),
                property.SanitizePropertyName());
        }
        return sb.ToString();
    }

    public string CreateRawJsonObject(IEnumerable<OdcmProperty> properties = null, bool isComplexType = false) {
        StringBuilder sb = new StringBuilder(
@"    /**
     * The raw representation of this class
     */
    @Expose(serialize = false, deserialize = false)
    private JsonObject mRawObject;

    /**
     * Gets the raw representation of this class
     * @returns the raw representation of this class
     */
    public JsonObject getRawObject() {
        return mRawObject;
    }

    /**
     * Sets the raw json object
     *
     * @param serializer The serializer
     * @param json The json object to set this object to
     */
    public void setRawObject(final ISerializer serializer, final JsonObject json) {
        mRawObject = json;
");
        if (!isComplexType && properties != null)
        {
            foreach (var property in properties.Where(p => p.IsCollection())) {
                sb.AppendFormat(
@"
        if (json.has(""{0}"")) {{
            final {1}CollectionResponse response = new {1}CollectionResponse();
            if (json.has(""{0}@odata.nextLink"")) {{
                response.nextLink = json.get(""{0}@odata.nextLink"").getAsString();
            }}

            final {2}[] array = serializer.deserializeObject(json.get(""{0}"").toString(), {2}[].class);
            response.value = Arrays.asList(array);
            {0} = new {1}CollectionPage(response, null);
        }}
",
            property.Name.ToLowerFirstChar(),
            property.Name.ToUpperFirstChar(),
            property.GetTypeString());
            }
        }
        sb.Append("    }");
        return sb.ToString();
    }

    public string CreateExtensiblityMessage() {
        return
@"// This file is available for extending, afterwards please submit a pull request.";
    }

    public string CreatAutogeneratedWarning() {
        return
@"// **NOTE** This file was generated by a tool and any changes will be overwritten.";
    }
#>
