<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension="\\" #>
<#
CustomT4Host host       = (CustomT4Host) Host;
OdcmModel model         = host.CurrentModel;
CodeWriterJava writer   = (CodeWriterJava) host.CodeWriter;
var clientName = model.GetEntityContainer().ToUpperFirstChar() + "Client";
var clientNameLower = clientName.ToLowerFirstChar();
var entity = host.CurrentType as OdcmProperty;
var innerEntity = entity.Type;
var innerEntityType = innerEntity.Name.ToUpperFirstChar();
var collectionRequest = entity.Name.ToUpperFirstChar() + "CollectionRequest";
var collectionResponse = entity.Name.ToUpperFirstChar() + "CollectionResponse";
var collectionPage = entity.Name.ToUpperFirstChar() + "CollectionPage";

#>
<#=writer.WriteHeader()#>

package com.onedrive.sdk.generated;

import com.onedrive.sdk.*;
import com.onedrive.sdk.extensions.*;
import com.onedrive.sdk.options.*;

import java.util.*;

/**
 * The type <#=collectionRequest#>.
 */
public class Base<#=collectionRequest#> extends BaseRequest {

    /**
     * Constructs a new <#=collectionRequest#>.
     *
     * @param requestUrl The request URL.</param>
     * @param <#=clientNameLower#> The I<#=clientName#> for handling requests.
     * @param options Query option name value pairs for the request.
     */
    public <#=collectionRequest#>(
        final String requestUrl,
        final I<#=clientName#> <#=clientNameLower#>,
        final List<Option> options) {
        super(requestUrl, <#=clientNameLower#>, options);
    }

    <#
    if (entity.Name.Equals("children"))
    {
    #>

    /**
     * Adds the specified <#=innerEntityType#> to the collection via POST.
     *
     * @param <#=innerEntity.Name#> The <#=innerEntityType#> to add.
     * @param callback The callback to this request
     * @returns The created <#=innerEntityType#>.
     */
    public <#=innerEntityType#> add(final <#=innerEntityType#> <#=innerEntity.Name#>, ICallback callback) {
        mContentType = "application/json";
        mMethod = "POST";
        return send<<#=innerEntityType#>>(<#=innerEntity.Name#>, callback);
    }
    <#
    }
    #>

    /**
     * Gets the collection page.
     *
     * @returns The collection page.
     */
    public Task<I<#=collectionPage#>> get() {
        mMethod = "GET";
        int response = send<<#=collectionResponse#>>(null, callback);
        if (response != null && response.Value != null && response.Value.CurrentPage != null)
        {
            if (response.AdditionalData != null)
            {
                Object nextPageLink;
                response.AdditionalData.TryGetValue("@odata.nextLink", out nextPageLink);

                String nextPageLinkString = nextPageLink as String;

                if (nextPageLinkString != null && !nextPageLinkString.isEmpty())
                {
                    response.Value.InitializeNextPageRequest(
                        m<#=clientName#>,
                        nextPageLinkString);
                }
            }

            return response.Value;
        }

        return null;
    }

    /**
     * Adds the specified expand value to the request.
     *
     * @param value The expand value.
     * @returns The request object to send.
     */
    public I<#=collectionRequest#> expand(final String value) {
        mQueryOptions.add(new QueryOption("expand", value));
        return this;
    }

    /**
     * Adds the specified select value to the request.
     *
     * @param value The select value.
     * @returns The request object to send.
     */
    public I<#=collectionRequest#> select(final String value) {
        mQueryOptions.add(new QueryOption("select", value));
        return this;
    }

    /**
     * Adds the specified top value to the request.
     *
     * @param value The top value.
     * @returns The request object to send.
     */
    public I<#=collectionRequest#> top(final String value) {
        mQueryOptions.add(new QueryOption("top", value));
        return this;
    }
}