<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension="\\" #>
package com.onedrive.sdk.test.generated;

import com.onedrive.sdk.BaseRequest;
import com.onedrive.sdk.ICallback;
import com.onedrive.sdk.extensions.IOneDriveClient;
import com.onedrive.sdk.options.Option;
import com.onedrive.sdk.options.QueryOption;
import com.onedrive.sdk.test.extensions.Drive;
import com.onedrive.sdk.test.extensions.DriveRequest;
import com.onedrive.sdk.test.extensions.IDriveRequest;

import java.util.List;

/**
 * I am generated by EntityRequest.java.tt (Might not be implemented)
 *
 * I extend the BaseRequest
 * I have an interface IBaseDriveRequest that is also auto generated
 * I have the full CRUD complement of functions
 * I always return a IDriveRequest object
 */
public class BaseDriveRequest extends BaseRequest implements IBaseDriveRequest {

    public BaseDriveRequest(String requestUrl, IOneDriveClient client, List<Option> options) {
        super(requestUrl, client, options);
    }

    public void get(final ICallback<Drive> callback) {
        // Build Request
        // Send request via Http
        // Get response
        // IsSuccess?
            // deserializeResponse
            // callback.success(stuff);
        // else IsFailure
            // deserializeResponse
            // callback.failure
    }

    public void update(final Drive sourceDrive, final ICallback<Drive> callback) {
        // Build Request
        // Serialize sourceDrive
        // Send request via Http
        // Get response
        // IsSuccess?
            // deserializeResponse
            // callback.success(stuff);
        // else IsFailure
            // deserializeResponse
            // callback.failure
    }

    public void delete(final Drive sourceDrive, final ICallback<Void> callback) {
        // Build Request
        // Send request via Http
        // Get response
        // IsSuccess?
            // callback.success(stuff);
        // else IsFailure
            // deserializeResponse
            // callback.failure
    }

    public void create(final Drive newDrive, final ICallback<Drive> callback) {
        // Build Request
        // Serialize newDrive
        // Send request via Http
        // Get response
        // IsSuccess?
            // deserializeResponse
            // callback.success(stuff);
        // else IsFailure
            // deserializeResponse
            // callback.failure
    }

    public IDriveRequest select(final String value) {
        this.mQueryOptions.add(new QueryOption("select", value));
        return (DriveRequest)this; // TODO: 'this' always needs to be cast'ed to the extension type
    }
}
