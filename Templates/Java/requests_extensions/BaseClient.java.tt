<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="BaseJavaModel.template.tt"#>
<#@ output extension="\\" #>
<#=writer.WriteHeader()#>
<#=CreatePackageDef(host)#>
import com.microsoft.graph.core.IBaseClient;
import com.microsoft.graph.models.extensions.IGraphServiceClient;
import com.microsoft.graph.models.extensions.<#=IBaseClientType(c)#>;
import com.microsoft.graph.core.BaseClient;

<#=CreateClassDef(BaseClientType(c), "BaseClient", IBaseClientType(c))#>

    /**
     * The default endpoint for the Microsoft Graph Service
     */
    public static final String DEFAULT_GRAPH_ENDPOINT = "https://graph.microsoft.com/v1.0";

    /**
     * The current endpoint
     */
    private String endpoint;

    @Override
    public String getServiceRoot() {
        if (endpoint == null) {
            endpoint = DEFAULT_GRAPH_ENDPOINT;
        }
        return endpoint;
    }

    @Override
    public void setServiceRoot(String value) {
        endpoint = value;
    }
<#
foreach (var prop in model.EntityContainer.Properties)
{
    var propertyName = prop.Name.ToUpperFirstChar();
    if (prop.IsCollection())
    {
#>

    /**
     * Gets the collection of <#=propertyName#> objects
     *
     * @return the request builder for the collection of <#=propertyName#> objects
     */
    public <#=ITypeCollectionRequestBuilder(prop)#> <#=prop.Name#>() {
        return new <#=TypeCollectionRequestBuilder(prop)#>(getServiceRoot() + "/<#=prop.Name#>", this, null);
    }

    /**
     * Gets a single <#=propertyName#>
     *
     * @param id the id of the <#=propertyName#> to retrieve
     * @return the request builder for the <#=propertyName#> object
     */
    public <#=ITypeRequestBuilder(prop)#> <#=prop.Name#>(final String id) {
        return new <#=TypeRequestBuilder(prop)#>(getServiceRoot() + "/<#=prop.Name#>/" + id, this, null);
    }
<#
    }
    else
    {
#>

    /**
     * Gets the <#=TypeRequestBuilder(c)#>
     *
     * @return the <#=prop.Projection.Type.GetTypeString()#>
     */
    public <#=ITypeRequestBuilder(prop)#> <#=prop.Name#>() {
        return new <#=TypeRequestBuilder(prop)#>(getServiceRoot() + "/<#=prop.Name#>", this, null);
    }
<#
    }
}
#>
}
