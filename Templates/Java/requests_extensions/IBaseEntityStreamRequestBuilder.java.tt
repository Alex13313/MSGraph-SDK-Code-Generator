<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="BaseJavaModel.template.tt"#>
<#@ output extension="\\" #>
<#host.TemplateName = ITypeStreamRequestBuilder(c);#>
<#=writer.WriteHeader()#>
<#=CreatePackageDefForBaseEntityRequestBuilder(host)#>
import com.microsoft.graph.core.IBaseClient;
import com.microsoft.graph.http.BaseRequestBuilder;
import com.microsoft.graph.options.Option;
import com.microsoft.graph.http.IRequestBuilder;
import java.util.EnumSet;

<#=CreateInterfaceDef(ITypeStreamRequestBuilder(c), "IRequestBuilder")#>

    /**
     * Creates the request
     *
     * @return the <#=ITypeStreamRequest(c)#> instance
     */
    <#=ITypeStreamRequest(c)#> buildRequest();

    /**
     * Creates the request with specific options instead of the existing options
     *
     * @param requestOptions the options for this request
     * @return the <#=ITypeStreamRequest(c)#> instance
     */
    <#=ITypeStreamRequest(c)#> buildRequest(final java.util.List<? extends Option> requestOptions);
<#
if (c.AsOdcmClass() != null)
{
    foreach(var prop in c.AsOdcmClass().NavigationProperties())
    {
        var propName = prop.Name.ToUpperFirstChar();
        if (prop.IsCollection()) {
#>

    <#=ITypeCollectionRequestBuilder(prop)#> <#=prop.Name#>();

    <#=ITypeRequestBuilder(prop)#> <#=prop.Name#>(final String id);
<#
        } else {
#>

    /**
     * Gets the request builder for <#=TypeName(prop)#>
     *
     * @return the <#=ITypeRequestBuilder(prop)#> instance
     */
    <#=ITypeRequestBuilder(prop)#> <#=prop.Name#>();
<#
        }
    }
#>
<#
    foreach (var prop in c.AsOdcmClass().GetProperties(typeName:"Stream"))
    {
        var propName = prop.Name.ToCheckedCase();
        var propRequestBuilder = TypeRequestBuilder(prop);
#>

    I<#=propRequestBuilder#> <#=prop.Name#>();
<#
    }
#>

<#
    foreach (var prop in c.AsOdcmClass().Properties.Where(x => x.Projection.Type is OdcmMediaClass))
    {
        var propName = prop.Name.ToCheckedCase();
#>

    <#=ITypeStreamRequestBuilder(prop)#> <#=prop.Name#>Value();
<#
    }
#>


<#
    foreach (var method in c.AsOdcmClass().MethodsAndOverloads())
    {
        var parameterList = MethodParametersSignature(method);
        if (parameterList != "") { parameterList = parameterList.Remove(0, 2); }
#>
<#		if (method.IsCollection){#>

    <#=ITypeCollectionRequestBuilder(method)#> <#=MethodName(method).ToLowerFirstChar()#>(<#=parameterList#>);
<# 		} else { #>
    <#=ITypeRequestBuilder(method)#> <#=MethodName(method).ToLowerFirstChar()#>(<#=parameterList#>);
<#
        }
    }
}
#>

}
