<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="BaseJavaModel.template.tt"#>
<#@ output extension="\\" #>
<#host.TemplateName = TypeCollectionRequestBuilder(c);#>
<#=writer.WriteHeader()#>
<#=CreatePackageDef(host)#>

import com.microsoft.graph.requests.extensions.<#=ITypeCollectionRequestBuilder(c)#>;
import com.microsoft.graph.requests.extensions.<#=ITypeRequestBuilder(c)#>;
import com.microsoft.graph.requests.extensions.<#=ITypeCollectionRequest(c)#>;
<#
var currentTypeProjection = c.AsOdcmProperty().Projection.Type.AsOdcmClass();
if (currentTypeProjection != null) {
    foreach (var method in currentTypeProjection.MethodsAndOverloads()) {
        if (!method.IsBoundToCollection) {
            continue;
        }

        var parameterList = MethodParametersImports(method);
if (parameterList != "") {
#>
<#=parameterList#>
<#
}
        if (method.IsCollection) {
#>
import com.microsoft.graph.requests.extensions.<#=ITypeCollectionRequestBuilder(method)#>;
<#
        } else {
#>
import com.microsoft.graph.requests.extensions.<#=ITypeRequestBuilder(method)#>;
<#
        }
    }
}
#>
<# if (ShouldIncludeCollectionTypeReference(c)) { #>
import com.microsoft.graph.models.extensions.<#=TargetCollectionType(c)#>;
<# } #>
import com.microsoft.graph.options.Option;
import com.microsoft.graph.http.BaseRequestBuilder;
import com.microsoft.graph.core.IBaseClient;

<#=CreateClassDef(TypeCollectionRequestBuilder(c), "BaseRequestBuilder", ITypeCollectionRequestBuilder(c))#>

    /**
     * The request builder for this collection of <#=ClassTypeName(c)#>
     *
     * @param requestUrl     the request URL
     * @param client         the service client
     * @param requestOptions the options for this request
     */
    public <#=TypeCollectionRequestBuilder(c)#>(final String requestUrl, final <#=IBaseClientType()#> client, final java.util.List<? extends Option> requestOptions) {
        super(requestUrl, client, requestOptions);
    }

    public <#=ITypeCollectionRequest(c)#> buildRequest() {
        return buildRequest(getOptions());
    }

    public <#=ITypeCollectionRequest(c)#> buildRequest(final java.util.List<? extends Option> requestOptions) {
        return new <#=TypeCollectionRequest(c)#>(getRequestUrl(), getClient(), requestOptions);
    }

    public <#=ITypeRequestBuilder(c)#> byId(final String id) {
        return new <#=TypeRequestBuilder(c)#>(getRequestUrlWithAdditionalSegment(id), getClient(), getOptions());
    }

<#
	if(host.TemplateName.Equals("DriveItemCollectionRequestBuilder")){
#>
    public IDriveItemRequestBuilder appRoot() {
    	return new DriveItemRequestBuilder(this.getRequestUrlWithAdditionalSegment("approot"), this.getClient(), null);
    }
<# } #>

<#
if (currentTypeProjection != null) {
    foreach (var method in currentTypeProjection.MethodsAndOverloads()) {

        if (!method.IsBoundToCollection) {
            continue;
        }

        var parameterList = MethodParametersSignature(method);

        if (parameterList != "") {
            parameterList = parameterList.Remove(0, 2);
        }

        if (method.IsCollection) {
#>

    public <#=ITypeCollectionRequestBuilder(method)#> <#=MethodName(method).ToLowerFirstChar()#>(<#=parameterList#>) {
        return new <#=TypeCollectionRequestBuilder(method)#>(getRequestUrlWithAdditionalSegment("<#=MethodFullName(method)#>"), getClient(), null<#=MethodParametersValues(method)#>);
    }
<#
	// Add a method to support delta query by string (opaque deltaLink)
	if (MethodName(method) == "Delta") {
#>

	public <#=ITypeCollectionRequestBuilder(method)#> <#=MethodName(method).ToLowerFirstChar()#>(final String deltaLink) {
        return new <#=TypeCollectionRequestBuilder(method)#>(deltaLink, getClient(), null<#=MethodParametersValues(method)#>);
    }
<# } #>
<#
        } else {
#>

    public <#=ITypeRequestBuilder(method)#> <#=MethodName(method).ToLowerFirstChar()#>(<#=parameterList#>) {
        return new <#=TypeRequestBuilder(method)#>(getRequestUrlWithAdditionalSegment("<#=MethodFullName(method)#>"), getClient(), null<#=MethodParametersValues(method)#>);
    }
<#
        }
    }
}
#>
}
