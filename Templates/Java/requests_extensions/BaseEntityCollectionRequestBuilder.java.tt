<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="BaseJavaModel.template.tt"#>
<#@ output extension="\\" #>
<#host.TemplateName = c.TypeCollectionRequestBuilder();#>
<#=writer.WriteHeader()#>
<#=host.CreatePackageDef()#>

<#=TypeHelperJava.CreateClassDef(c.TypeCollectionRequestBuilder(), "BaseRequestBuilder", c.ITypeCollectionRequestBuilder())#>

    /**
     * The request builder for this collection of <#=c.ClassTypeName()#>
     *
     * @param requestUrl     the request URL
     * @param client         the service client
     * @param requestOptions the options for this request
     */
    public <#=c.TypeCollectionRequestBuilder()#>(final String requestUrl, final <#=TypeHelperJava.IBaseClientType()#> client, final java.util.List<? extends com.microsoft.graph.options.Option> requestOptions) {
        super(requestUrl, client, requestOptions);
    }

    public <#=c.ITypeCollectionRequest()#> buildRequest() {
        return buildRequest(getOptions());
    }

    public <#=c.ITypeCollectionRequest()#> buildRequest(final java.util.List<? extends com.microsoft.graph.options.Option> requestOptions) {
        return new <#=c.TypeCollectionRequest()#>(getRequestUrl(), getClient(), requestOptions);
    }

    public <#=c.ITypeRequestBuilder()#> byId(final String id) {
        return new <#=c.TypeRequestBuilder()#>(getRequestUrlWithAdditionalSegment(id), getClient(), getOptions());
    }

<#
	if(host.TemplateName.Equals("DriveItemCollectionRequestBuilder")){
#>
    public IDriveItemRequestBuilder appRoot() {
    	return new DriveItemRequestBuilder(this.getRequestUrlWithAdditionalSegment("approot"), this.getClient(), null);
    }
<# } #>

<#
var currentTypeProjection = c.AsOdcmProperty().Projection.Type.AsOdcmClass();
if (currentTypeProjection != null) {
    foreach (var method in currentTypeProjection.MethodsAndOverloads()) {

        if (!method.IsBoundToCollection) {
            continue;
        }

        var parameterList = method.MethodParametersSignature();

        if (parameterList != "") {
            parameterList = parameterList.Remove(0, 2);
        }

        if (method.IsCollection) {
#>

    public <#=method.ITypeCollectionRequestBuilder()#> <#=method.MethodName().ToLowerFirstChar()#>(<#=parameterList#>) {
        return new <#=method.TypeCollectionRequestBuilder()#>(getRequestUrlWithAdditionalSegment("<#=method.MethodFullName()#>"), getClient(), null<#=method.MethodParametersValues()#>);
    }
<#
	// Add a method to support delta query by string (opaque deltaLink)
	if (method.MethodName() == "Delta") {
#>

	public <#=method.ITypeCollectionRequestBuilder()#> <#=method.MethodName().ToLowerFirstChar()#>(final String deltaLink) {
        return new <#=method.TypeCollectionRequestBuilder()#>(deltaLink, getClient(), null<#=method.MethodParametersValues()#>);
    }
<# } #>
<#
        } else {
#>

    public <#=method.ITypeRequestBuilder()#> <#=method.MethodName().ToLowerFirstChar()#>(<#=parameterList#>) {
        return new <#=method.TypeRequestBuilder()#>(getRequestUrlWithAdditionalSegment("<#=method.MethodFullName()#>"), getClient(), null<#=method.MethodParametersValues()#>);
    }
<#
        }
    }
}
#>
}
