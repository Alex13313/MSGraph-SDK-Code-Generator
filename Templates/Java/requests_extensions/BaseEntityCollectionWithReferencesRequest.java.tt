<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="BaseJavaModel.template.tt"#>
<#@ output extension="\\" #>
<#host.TemplateName = TypeCollectionWithReferencesRequest(c);#>
<#=writer.WriteHeader()#>
<#=CreatePackageDef(host)#>

import com.microsoft.graph.core.ClientException;
import com.microsoft.graph.options.QueryOption;
import com.microsoft.graph.options.Option;
import com.microsoft.graph.core.IBaseClient;
import com.microsoft.graph.http.BaseCollectionRequest;
import com.microsoft.graph.concurrency.ICallback;
import com.microsoft.graph.concurrency.IExecutors;

<#=CreateClassDef(TypeCollectionWithReferencesRequest(c), "BaseCollectionRequest" + CollectionRequestGeneric(c), ITypeCollectionWithReferencesRequest(c))#>

    /**
     * The request builder for this collection of <#=TypeName(c)#>
     *
     * @param requestUrl     the request URL
     * @param client         the service client
     * @param requestOptions the options for this request
     */
    public <#=TypeCollectionWithReferencesRequest(c)#>(final String requestUrl, <#=IBaseClientType()#> client, final java.util.List<? extends Option> requestOptions) {
        super(requestUrl, client, requestOptions, <#=TypeCollectionResponse(c)#>.class, <#=ITypeCollectionPage(c)#>.class);
    }

    public void get(final ICallback<<#=ITypeCollectionWithReferencesPage(c)#>> callback) {
        final IExecutors executors = getBaseRequest().getClient().getExecutors();
        executors.performOnBackground(new Runnable() {
           @Override
           public void run() {
                try {
                    executors.performOnForeground(get(), callback);
                } catch (final ClientException e) {
                    executors.performOnForeground(e, callback);
                }
           }
        });
    }

    public <#=ITypeCollectionWithReferencesPage(c)#> get() throws ClientException {
        final <#=TypeCollectionResponse(c)#> response = send();
        return buildFromResponse(response);
    }

<# if (c.GetFeatures().CanExpand) { #>
    public <#=ITypeCollectionRequest(c)#> expand(final String value) {
        addQueryOption(new QueryOption("$expand", value));
        return (<#=TypeCollectionRequest(c)#>)this;
    }

<# } #>
<# if (c.GetFeatures().CanSelect) { #>
    public <#=ITypeCollectionRequest(c)#> select(final String value) {
        addQueryOption(new QueryOption("$select", value));
        return (<#=TypeCollectionRequest(c)#>)this;
    }

<# } #>
<# if (c.GetFeatures().CanUseTop) { #>
    public <#=ITypeCollectionRequest(c)#> top(final int value) {
        addQueryOption(new QueryOption("$top", value + ""));
        return (<#=TypeCollectionRequest(c)#>)this;
    }

<# } #>
    public <#=ITypeCollectionWithReferencesPage(c)#> buildFromResponse(final <#=TypeCollectionResponse(c)#> response) {
        final <#=ITypeCollectionRequestBuilder(c)#> builder;
        if (response.nextLink != null) {
            builder = new <#=TypeCollectionRequestBuilder(c)#>(response.nextLink, getBaseRequest().getClient(), /* options */ null);
        } else {
            builder = null;
        }
        final <#=TypeCollectionWithReferencesPage(c)#> page = new <#=TypeCollectionWithReferencesPage(c)#>(response, builder);
        page.setRawObject(response.getSerializer(), response.getRawObject());
        return page;
    }
}
