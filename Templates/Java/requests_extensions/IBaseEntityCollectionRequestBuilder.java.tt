<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="BaseJavaModel.template.tt"#>
<#@ output extension="\\" #>
<#host.TemplateName = c.ITypeCollectionRequestBuilder();#>
<#
    var genericType = "<" + c.TypeName() + ", " + c.ITypeCollectionRequestBuilder() + ">";
#>
<#=writer.WriteHeader()#>
<#=host.CreatePackageDef()#>

import <#=host.CurrentNamespace()#>.<#=TypeHelperJava.GetPrefixForRequests()#>.<#=c.ITypeRequestBuilder()#>;
import <#=host.CurrentNamespace()#>.<#=TypeHelperJava.GetPrefixForRequests()#>.<#=c.ITypeCollectionRequest()#>;
<#
var currentTypeProjection = c.AsOdcmProperty().Projection.Type.AsOdcmClass();
if (currentTypeProjection != null) {
    foreach (var method in currentTypeProjection.MethodsAndOverloads()) {
        if (!method.IsBoundToCollection) {
            continue;
        }
        if (method.IsCollection) {
#>
import <#=host.CurrentNamespace()#>.<#=TypeHelperJava.GetPrefixForRequests()#>.<#=method.ITypeCollectionRequestBuilder()#>;
<#
        } else {
#>
import <#=host.CurrentNamespace()#>.<#=TypeHelperJava.GetPrefixForRequests()#>.<#=method.ITypeRequestBuilder()#>;
<#
        }
    }
}
#>
import <#=host.CurrentModel.GetNamespace().AddPrefix()#>.options.Option;
import <#=host.CurrentModel.GetNamespace().AddPrefix()#>.http.IBaseCollectionPage;

<#=TypeHelperJava.CreateInterfaceDef(c.ITypeCollectionRequestBuilder(), "IRequestBuilder")#>

    <#=c.ITypeCollectionRequest()#> buildRequest();

    <#=c.ITypeCollectionRequest()#> buildRequest(final java.util.List<? extends com.microsoft.graph.options.Option> requestOptions);

    <#=c.ITypeRequestBuilder()#> byId(final String id);

<#
if (currentTypeProjection != null)
{
    foreach (var method in currentTypeProjection.AsOdcmClass().MethodsAndOverloads()) {

        if (!method.IsBoundToCollection) {
            continue;
        }

        var parameterList = method.MethodParametersSignature();
        if (parameterList != "") {
            parameterList = parameterList.Remove(0, 2);
        }

        if (method.IsCollection) {
#>

    <#=method.ITypeCollectionRequestBuilder()#> <#=method.MethodName().ToLowerFirstChar()#>(<#=parameterList#>);
<#
	// Add a method to support delta query by string (opaque deltaLink)
	if (method.MethodName() == "Delta") {
#>

	<#=method.ITypeCollectionRequestBuilder()#> <#=method.MethodName().ToLowerFirstChar()#>(final String deltaLink);
<# } #>
<#  } else { #>
    <#=method.ITypeRequestBuilder()#> <#=method.MethodName().ToLowerFirstChar()#>(<#=parameterList#>);
<#
        }
    }
}
#>
}
