<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="BaseJavaModel.template.tt"#>
<#@ output extension="\\" #>
<#
    var baseClass = "BaseRequest";
    var typeRequest = TypeRequest(c);
    var iTypeRequest = ITypeRequest(c);
    var baseTypeRequest = TypeRequest(c);
    var iBaseTypeRequest = ITypeRequest(c);
    var returnType = ReturnType(c);

    if (c.AsOdcmMethod().IsCollection)
    {
        baseClass = "BaseCollectionRequest";
        typeRequest = TypeCollectionRequest(c);
        iTypeRequest = ITypeCollectionRequest(c);
        baseTypeRequest = TypeCollectionRequest(c);
        iBaseTypeRequest = ITypeCollectionRequest(c);
    }
#>
<#host.TemplateName = baseTypeRequest;#>
<#=writer.WriteHeader()#>
<#=CreatePackageDefForBaseMethodBodyRequest(host)#>
import com.microsoft.graph.concurrency.ICallback;
import com.microsoft.graph.core.ClientException;
import com.microsoft.graph.core.IBaseClient;
import com.microsoft.graph.options.Option;
import com.microsoft.graph.options.QueryOption;
<#
	if (c.AsOdcmMethod().IsCollection) {
#>
import com.microsoft.graph.concurrency.IExecutors;
import com.microsoft.graph.http.BaseCollectionRequest;
<#
	}
	else {
#>
import com.microsoft.graph.http.BaseRequest;
import com.microsoft.graph.http.HttpMethod;
<#
	}
#>

<#=CreateClassDef(baseTypeRequest, baseClass, iBaseTypeRequest)#>
    protected final <#=TypeBody(c)#> body;

    /**
     * The request for this <#=TypeName(c)#>
     *
     * @param requestUrl     the request URL
     * @param client         the service client
     * @param requestOptions the options for this request
     */
    public <#=baseTypeRequest#>(final String requestUrl, final <#=IBaseClientType()#> client, final java.util.List<? extends Option> requestOptions) {
        super(requestUrl, client, requestOptions, <#=returnType#>.class);
        body = new <#=TypeBody(c)#>();
    }

    public void post(final ICallback<<#=returnType#>> callback) {
        send(HttpMethod.POST, callback, body);
    }

    public <#=returnType#> post() throws ClientException {
        return send(HttpMethod.POST, body);
    }

<# if (c.GetFeatures().CanSelect) { #>
    /**
     * Sets the select clause for the request
     *
     * @param value the select clause
     * @return the updated request
     */
    public <#=iTypeRequest#> select(final String value) {
        getQueryOptions().add(new QueryOption("$select", value));
        return (<#=typeRequest#>)this;
    }

<# } #>
<# if (c.GetFeatures().CanUseTop) { #>
    /**
     * Sets the top value for the request
     *
     * @param value the max number of items to return
     * @return the updated request
     */
    public <#=iTypeRequest#> top(final int value) {
        getQueryOptions().add(new QueryOption("$top", value+""));
        return (<#=typeRequest#>)this;
    }

<# } #>
<# if (c.GetFeatures().CanExpand) { #>
    /**
     * Sets the expand clause for the request
     *
     * @param value the expand clause
     * @return the updated request
     */
    public <#=iTypeRequest#> expand(final String value) {
        getQueryOptions().add(new QueryOption("$expand", value));
        return (<#=typeRequest#>)this;
    }

<# } #>
}
