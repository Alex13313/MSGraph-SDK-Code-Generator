<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="BaseJavaModel.template.tt"#>
<#@ output extension="\\" #>
<#host.TemplateName = c.TypeRequestBuilder();#>
<#=writer.WriteHeader()#>
<#=CreatePackageDefForBaseEntityRequestBuilder(host)#>
import com.microsoft.graph.core.IBaseClient;
import com.microsoft.graph.http.BaseRequestBuilder;
import com.microsoft.graph.options.Option;
import java.util.EnumSet;

<#=TypeHelperJava.CreateClassDef(c.TypeRequestBuilder(), "BaseRequestBuilder", c.ITypeRequestBuilder())#>

    /**
     * The request builder for the <#=c.TypeName()#>
     *
     * @param requestUrl     the request URL
     * @param client         the service client
     * @param requestOptions the options for this request
     */
    public <#=c.TypeRequestBuilder()#>(final String requestUrl, final <#=TypeHelperJava.IBaseClientType()#> client, final java.util.List<? extends Option> requestOptions) {
        super(requestUrl, client, requestOptions);
    }

    /**
     * Creates the request
     *
     * @return the <#=c.ITypeRequest()#> instance
     */
    public <#=c.ITypeRequest()#> buildRequest() {
        return buildRequest(getOptions());
    }

    /**
     * Creates the request with specific requestOptions instead of the existing requestOptions
     *
     * @param requestOptions the options for this request
     * @return the <#=c.ITypeRequest()#> instance
     */
    public <#=c.ITypeRequest()#> buildRequest(final java.util.List<? extends Option> requestOptions) {
        return new <#=c.TypeRequest()#>(getRequestUrl(), getClient(), requestOptions);
    }

<#
	if(host.TemplateName.Equals("DriveItemRequestBuilder")){
#>
    @Override
    public IDriveItemRequestBuilder itemWithPath(final String path) {
        return new DriveItemRequestBuilder(getRequestUrl() + ":/" + path + ":", getClient(), null);
    }
<# } else if(host.TemplateName.Equals("ThumbnailSetRequestBuilder")){ #>
    @Override
    public IThumbnailRequestBuilder getThumbnailSize(final String size) {
        return new ThumbnailRequestBuilder(getRequestUrlWithAdditionalSegment(size), getClient(), /* options */ null);
    }
<# } #>

<#
if (c.AsOdcmClass() != null)
{
    foreach(var prop in c.AsOdcmClass().NavigationProperties())
    {
        var propName = prop.Name.ToUpperFirstChar();
		var sanitizedProperty = propName.SanitizePropertyName().ToLowerFirstChar();
        var propRequestBuilder = prop.TypeRequestBuilder();
        if (prop.IsCollection()) {
#>
    public <#=prop.ITypeCollectionRequestBuilder()#> <#=sanitizedProperty#>() {
        return new <#=prop.TypeCollectionRequestBuilder()#>(getRequestUrlWithAdditionalSegment("<#=prop.Name#>"), getClient(), null);
    }

    public <#=prop.ITypeRequestBuilder()#> <#=sanitizedProperty#>(final String id) {
        return new <#=prop.TypeRequestBuilder()#>(getRequestUrlWithAdditionalSegment("<#=prop.Name#>") + "/" + id, getClient(), null);
    }
<#
        } else {
#>

    /**
     * Gets the request builder for <#=prop.TypeName()#>
     *
     * @return the <#=prop.ITypeRequestBuilder()#> instance
     */
    public <#=prop.ITypeRequestBuilder()#> <#=sanitizedProperty#>() {
        return new <#=prop.TypeRequestBuilder()#>(getRequestUrlWithAdditionalSegment("<#=prop.Name#>"), getClient(), null);
    }
<#
        }
    }
#>
<#
	foreach (var prop in c.AsOdcmClass().GetProperties(typeName:"Stream"))
	{
		var propName = prop.Name.ToCheckedCase();
		var sanitizedName = propName;
		if (c is OdcmMediaClass && propName == "Content") {
			 sanitizedName = prop.Type.GetReservedPrefix().ToCheckedCase() + prop.Name.ToCheckedCase();
		} else {
			sanitizedName = propName.SanitizePropertyName().ToLowerFirstChar();
		}
		var propRequestBuilder = prop.TypeRequestBuilder();
#>

    public I<#=propRequestBuilder#> <#=sanitizedName#>() {
        return new <#=propRequestBuilder#>(getRequestUrlWithAdditionalSegment("<#=prop.Name#>"), getClient(), null);
    }
<#
	}
#>
<#
    if (c is OdcmMediaClass)
    {
#>

    public <#=c.ITypeStreamRequestBuilder()#> content() {
        return new <#=c.TypeStreamRequestBuilder()#>(getRequestUrlWithAdditionalSegment("$value"), getClient(), null);
    }
<#
    }
#>
<#
    foreach (var method in c.AsOdcmClass().MethodsAndOverloads()) {

        if (method.IsBoundToCollection) {
            continue;
        }

        var parameterList = method.MethodParametersSignature();

        if (parameterList != "") {
            parameterList = parameterList.Remove(0, 2);
        }

		var sanitizedMethod = method.MethodName().SanitizePropertyName().ToLowerFirstChar();

        if (method.IsCollection) {
#>

    public <#=method.ITypeCollectionRequestBuilder()#> <#=sanitizedMethod#>(<#=parameterList#>) {
        return new <#=method.TypeCollectionRequestBuilder()#>(getRequestUrlWithAdditionalSegment("<#=method.MethodFullName()#>"), getClient(), null<#=method.MethodParametersValues()#>);
    }
<#      } else { #>

    public <#=method.ITypeRequestBuilder()#> <#=sanitizedMethod#>(<#=parameterList#>) {
        return new <#=method.TypeRequestBuilder()#>(getRequestUrlWithAdditionalSegment("<#=method.MethodFullName()#>"), getClient(), null<#=method.MethodParametersValues()#>);
    }
<#
        }
    }
}
#>
}

<#+
	public string CreatePackageDefForBaseEntityRequestBuilder(CustomT4Host host)
	{
		var sb = new StringBuilder();
		sb.Append(host.CreatePackageDefinition());

		var importFormat = @"import {0}.{1}.{2};";
		sb.AppendFormat(importFormat,
						host.CurrentModel.GetNamespace().NamespaceName(),
						"requests.extensions",
						host.CurrentType.ITypeRequest());
		sb.Append("\n");
		sb.AppendFormat(importFormat,
						host.CurrentModel.GetNamespace().NamespaceName(),
						"requests.extensions",
						host.CurrentType.TypeRequest());
		sb.Append("\n");
		var c = host.CurrentType;
		if (c.AsOdcmClass() != null)
		{
			foreach(var prop in c.AsOdcmClass().NavigationProperties())
			{
				if (prop.IsCollection()) {
					
					sb.AppendFormat(importFormat,
						host.CurrentModel.GetNamespace().NamespaceName(),
						"requests.extensions",
						prop.ITypeCollectionRequestBuilder());
					sb.Append("\n");

					sb.AppendFormat(importFormat,
						host.CurrentModel.GetNamespace().NamespaceName(),
						"requests.extensions",
						prop.TypeCollectionRequestBuilder());
					sb.Append("\n");
				}
				sb.AppendFormat(importFormat,
						host.CurrentModel.GetNamespace().NamespaceName(),
						"requests.extensions",
						prop.ITypeRequestBuilder());
				sb.Append("\n");

				sb.AppendFormat(importFormat,
						host.CurrentModel.GetNamespace().NamespaceName(),
						"requests.extensions",
						prop.TypeRequestBuilder());
				sb.Append("\n");
			}

			foreach (var prop in c.AsOdcmClass().GetProperties(typeName:"Stream"))
			{
				var propRequestBuilder = prop.TypeRequestBuilder();
				sb.AppendFormat(importFormat,
						host.CurrentModel.GetNamespace().NamespaceName(),
						"requests.extensions",
						"I" + propRequestBuilder);
				sb.Append("\n");

				sb.AppendFormat(importFormat,
						host.CurrentModel.GetNamespace().NamespaceName(),
						"requests.extensions",
						propRequestBuilder);
				sb.Append("\n");
			}

			if (c is OdcmMediaClass)
			{
				sb.AppendFormat(importFormat,
						host.CurrentModel.GetNamespace().NamespaceName(),
						"requests.extensions",
						host.CurrentType.ITypeStreamRequestBuilder());
				sb.Append("\n");

				sb.AppendFormat(importFormat,
						host.CurrentModel.GetNamespace().NamespaceName(),
						"requests.extensions",
						host.CurrentType.TypeStreamRequestBuilder());
				sb.Append("\n");
			}

			foreach (var method in c.AsOdcmClass().MethodsAndOverloads()) {
				if (method.IsBoundToCollection) {
					continue;
				}

				foreach (var p in method.Parameters)
				{
					if(!(p.Type is OdcmPrimitiveType) && p.Type.GetTypeString() != "com.google.gson.JsonElement") {
						var typeString = p.Type.GetTypeString();
						if(p.Type.GetTypeString().StartsWith("EnumSet<")){
							typeString = typeString.Substring(typeString.IndexOf("<") + 1);
							typeString = typeString.Substring(0, typeString.Length-1);
						}
						sb.AppendFormat(importFormat,
							host.CurrentModel.GetNamespace().NamespaceName(),
							p.GetPackagePrefix(),
							typeString);
						sb.Append("\n");
					}
				}

				if (method.IsCollection) {
					sb.AppendFormat(importFormat,
						host.CurrentModel.GetNamespace().NamespaceName(),
						"requests.extensions",
						method.ITypeCollectionRequestBuilder());
					sb.Append("\n");

					sb.AppendFormat(importFormat,
						host.CurrentModel.GetNamespace().NamespaceName(),
						"requests.extensions",
						method.TypeCollectionRequestBuilder());
					sb.Append("\n");
				} else {
					sb.AppendFormat(importFormat,
						host.CurrentModel.GetNamespace().NamespaceName(),
						"requests.extensions",
						method.ITypeRequestBuilder());
					sb.Append("\n");

					sb.AppendFormat(importFormat,
						host.CurrentModel.GetNamespace().NamespaceName(),
						"requests.extensions",
						method.TypeRequestBuilder());
					sb.Append("\n");
				}
			}
		}
		return sb.ToString();
	}
#>