<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="SharedCSharp.template.tt"#>
<#

var clientName = model.GetEntityContainer().ToCheckedCase() + "Client";
var clientNameLower = clientName.ToLowerFirstChar();

var method = host.CurrentType.AsOdcmMethod();
var responseType = method.ReturnType;
var responseTypeName = responseType.Name.ToCheckedCase() + method.Name.Substring(method.Name.IndexOf('.') + 1).ToCheckedCase();
var collectionRequest = responseTypeName + "CollectionRequest";
var collectionRequestBuilder = collectionRequest + "Builder";
var entityRequestBuilder = responseTypeName + "RequestBuilder";
var collectionPage = responseTypeName + "CollectionPage";
var collectionResponse = responseTypeName + "CollectionResponse";

#>

namespace Microsoft.OneDrive.Sdk
{
    using System.Collections.Generic;
    using System.Threading.Tasks;

    /// <summary>
    /// The type <#=collectionRequest#>.
    /// </summary>
    public partial class <#=collectionRequest#> : BaseRequest, I<#=collectionRequest#>
    {
        /// <summary>
        /// Constructs a new <#=collectionRequest#>.
        /// </summary>
        /// <param name="requestUrl">The request URL.</param>
        /// <param name="<#=clientNameLower#>">The <see cref="I<#=clientName#>"/> for handling requests.</param>
        /// <param name="options">Query option name value pairs for the request.</param>
        public <#=collectionRequest#>(
            string requestUrl,
            I<#=clientName#> <#=clientNameLower#>,
            IList<Option> options)
            : base(requestUrl, <#=clientNameLower#>, options)
        {
        }

        /// <summary>
        /// Gets the collection page.
        /// </summary>
        /// <returns>The collection page.</returns>
        public async Task<I<#=collectionPage#>> GetAsync()
        {
            this.Method = "GET";
            var response = await this.SendAsync<<#=collectionResponse#>>(null);
            if (response != null && response.Value != null && response.Value.CurrentPage != null)
            {
                if (response.AdditionalData != null)
                {
                    response.Value.AdditionalData = response.AdditionalData;

                    object nextPageLink;
                    response.AdditionalData.TryGetValue("@odata.nextLink", out nextPageLink);
                    var nextPageLinkString = nextPageLink as string;

                    if (!string.IsNullOrEmpty(nextPageLinkString))
                    {
                        response.Value.InitializeNextPageRequest(
                            this.<#=clientName#>,
                            nextPageLinkString);
                    }
                }
            <#
            if (method.HasSpecialCollection())
            {
                var specialMethodParams = method.SpecialMethodParameters();
                foreach (var parameter in specialMethodParams)
                {
            #>

                response.Value.<#=parameter.Name.ToCheckedCase()#> = response.<#=parameter.Name.ToCheckedCase()#>;
            <#
                }
            }
            #>

                return response.Value;
            }

            return null;
        }

        /// <summary>
        /// Adds the specified expand value to the request.
        /// </summary>
        /// <param name="value">The expand value.</param>
        /// <returns>The request object to send.</returns>
        public I<#=collectionRequest#> Expand(string value)
        {
            this.QueryOptions.Add(new QueryOption("expand", value));
            return this;
        }

        /// <summary>
        /// Adds the specified select value to the request.
        /// </summary>
        /// <param name="value">The select value.</param>
        /// <returns>The request object to send.</returns>
        public I<#=collectionRequest#> Select(string value)
        {
            this.QueryOptions.Add(new QueryOption("select", value));
            return this;
        }

        /// <summary>
        /// Adds the specified top value to the request.
        /// </summary>
        /// <param name="value">The top value.</param>
        /// <returns>The request object to send.</returns>
        public I<#=collectionRequest#> Top(string value)
        {
            this.QueryOptions.Add(new QueryOption("top", value));
            return this;
        }
    }
}
