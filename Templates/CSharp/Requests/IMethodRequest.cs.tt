<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="SharedCSharp.template.tt"#>
<#

var method = host.CurrentType.AsOdcmMethod();
var entityName = method.Class.Name.ToCheckedCase();
var httpMethod = (method.IsAction()) ? "POST" : "GET";
var methodName = method.Name.Substring(method.Name.IndexOf('.') + 1).ToCheckedCase();
var requestType = entityName + methodName + "Request";

var returnEntityType = method.ReturnType == null ? null : method.ReturnType.Name.GetTypeString().ToCheckedCase();
var returnTypeObject = method.ReturnType == null ? null : method.ReturnType.AsOdcmClass();
bool isAsync = method.LongDescriptionContains("async");
var isSpecialCollection = method.LongDescriptionContains("specialCollection");
var isCollection = method.IsCollection || isSpecialCollection;
var createCollectionPage = returnTypeObject != null && returnTypeObject.IsComplex();

var sendAsyncReturnType = isAsync
    ? "I" + entityName + methodName + "AsyncMonitor"
    : isCollection
        ? createCollectionPage
            ? "I" + entityName + methodName + "CollectionPage"
            : "IEnumerable<" + method.ReturnType.Name.ToCheckedCase() + ">"
        : returnEntityType;
        
var methodReturnType = sendAsyncReturnType == null
    ? "Task"
    : "Task<" + sendAsyncReturnType + ">";
    
var methodReturnTag = sendAsyncReturnType == null
    ? "The task to await."
    : string.Concat("The", sendAsyncReturnType);
        
bool hasParameters = method.Parameters != null && method.Parameters.Any();
#>

namespace <#=method.Namespace.GetNamespaceName()#>
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;
    
    /// <summary>
    /// The interface I<#=requestType#>.
    /// </summary>
    public partial interface I<#=requestType#> : IBaseRequest
    {
    <#
    if (hasParameters && method.IsAction())
    {
    #>

        /// <summary>
        /// Gets the request body.
        /// </summary>
        <#=requestType#>Body RequestBody { get; }
    <#
    }
    #>
    
        /// <summary>
        /// Issues the <#=httpMethod#> request.
        /// </summary>
        <#=methodReturnType#> <#=httpMethod.ToLower().ToCheckedCase()#>Async();

        /// <summary>
        /// Issues the <#=httpMethod#> request.
        /// </summary>
        /// <param name="completionOption">The <see cref="HttpCompletionOption"/> to pass to the <see cref="IHttpProvider"/> on send.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns><#=methodReturnTag#></returns>
        <#=methodReturnType#> <#=httpMethod.ToLower().ToCheckedCase()#>Async(HttpCompletionOption completionOption, CancellationToken cancellationToken);
    <#
    if (!string.Equals(sendAsyncReturnType, "Stream"))
    {
    #>
        
        /// <summary>
        /// Adds the specified expand value to the request.
        /// </summary>
        /// <param name="value">The expand value.</param>
        /// <returns>The request object to send.</returns>
        I<#=requestType#> Expand(string value);

        /// <summary>
        /// Adds the specified select value to the request.
        /// </summary>
        /// <param name="value">The select value.</param>
        /// <returns>The request object to send.</returns>
        I<#=requestType#> Select(string value);

        /// <summary>
        /// Adds the specified top value to the request.
        /// </summary>
        /// <param name="value">The top value.</param>
        /// <returns>The request object to send.</returns>
        I<#=requestType#> Top(int value);
    <#
    }
    #>

    }
}
