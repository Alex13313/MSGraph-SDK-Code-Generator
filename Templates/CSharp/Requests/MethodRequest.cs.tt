<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="SharedCSharp.template.tt"#>
<#

var method = host.CurrentType.AsOdcmMethod();
var entityName = method.Class.Name.ToCheckedCase();
var httpMethod = (method.IsAction()) ? "POST" : "GET";
var methodName = method.Name.Substring(method.Name.IndexOf('.') + 1).ToCheckedCase();
var requestType = entityName + methodName + "Request";

var returnEntityType = method.ReturnType == null ? null : method.ReturnType.Name.GetTypeString().ToCheckedCase();
var returnTypeObject = method.ReturnType == null ? null : method.ReturnType.AsOdcmClass();
bool isAsync = method.LongDescriptionContains("async");
var isSpecialCollection = method.LongDescriptionContains("specialCollection");
var isCollection = method.IsCollection || isSpecialCollection;
var createCollectionPage = isCollection && returnTypeObject != null && returnTypeObject.IsComplex();

var monitorType = entityName + methodName + "AsyncMonitor";

var sendAsyncReturnType = isAsync
    ? "I" + entityName + methodName + "AsyncMonitor"
    : isCollection
        ? createCollectionPage
            ? "I" + entityName + methodName + "CollectionPage"
            : "IEnumerable<" + method.ReturnType.Name.ToCheckedCase() + ">"
        : returnEntityType;
        
var methodReturnType = sendAsyncReturnType == null
    ? "Task"
    : "Task<" + sendAsyncReturnType + ">";
        
bool hasParameters = method.Parameters != null && method.Parameters.Any();
#>

namespace Microsoft.OneDrive.Sdk
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Threading.Tasks;

    /// <summary>
    /// The type <#=requestType#>.
    /// </summary>
    public partial class <#=requestType#> : BaseRequest, I<#=requestType#>
    {
    <#
    var paramStringBuilder = new System.Text.StringBuilder();
    var requestBodyInitializerBuilder = new System.Text.StringBuilder();

    paramStringBuilder.Append(Environment.NewLine);
    paramStringBuilder.Append("            ");
    paramStringBuilder.Append("string requestUrl,");
    paramStringBuilder.Append(Environment.NewLine);
    paramStringBuilder.Append("            ");
    paramStringBuilder.Append("IBaseClient client,");
    paramStringBuilder.Append(Environment.NewLine);
    paramStringBuilder.Append("            ");
    paramStringBuilder.Append("IList<Option> options,");

    requestBodyInitializerBuilder.Append("this.Method = \"" + httpMethod + "\";");
    
    if (isAsync)
    {
        requestBodyInitializerBuilder.Append(Environment.NewLine);
        requestBodyInitializerBuilder.Append("            ");
        requestBodyInitializerBuilder.Append("this.Headers.Add(new HeaderOption(\"Prefer\", \"respond-async\"));");
    }

    if (hasParameters && method.IsAction())
    {
        requestBodyInitializerBuilder.Append(Environment.NewLine);
        requestBodyInitializerBuilder.Append("            ");
        requestBodyInitializerBuilder.Append("this.ContentType = \"application/json\";");
        requestBodyInitializerBuilder.Append(Environment.NewLine);
        requestBodyInitializerBuilder.Append("            ");
        requestBodyInitializerBuilder.Append("this.RequestBody = new " + requestType + "Body();");
    }

    foreach (var param in method.Parameters)
    {
        var paramTypeString = param.Type.GetTypeString();

        paramStringBuilder.Append(Environment.NewLine);
        paramStringBuilder.Append("            ");
        paramStringBuilder.Append(paramTypeString);

        if (param.Type.IsTypeNullable())
        {
            paramStringBuilder.Append(" " + param.Name.ToLowerFirstChar() + " = null,");
        }
        else
        {
            paramStringBuilder.Append("? " + param.Name.ToLowerFirstChar() + " = null,");
        }

        if (method.IsAction())
        {
            requestBodyInitializerBuilder.Append(Environment.NewLine);
            requestBodyInitializerBuilder.Append("            ");
            requestBodyInitializerBuilder.Append("this.RequestBody.");
            requestBodyInitializerBuilder.Append(param.Name.ToCheckedCase());
            requestBodyInitializerBuilder.Append(" = ");
            requestBodyInitializerBuilder.Append(param.Name.ToLowerFirstChar());
            requestBodyInitializerBuilder.Append(";");
        }
        else
        {
            requestBodyInitializerBuilder.Append(Environment.NewLine);
            requestBodyInitializerBuilder.Append(Environment.NewLine);
            requestBodyInitializerBuilder.Append("            ");
            requestBodyInitializerBuilder.Append("if (");
            requestBodyInitializerBuilder.Append(param.Name.ToLowerFirstChar());
            requestBodyInitializerBuilder.Append(" != null)");
            requestBodyInitializerBuilder.Append(Environment.NewLine);
            requestBodyInitializerBuilder.Append("            ");
            requestBodyInitializerBuilder.Append("{");
            requestBodyInitializerBuilder.Append(Environment.NewLine);
            requestBodyInitializerBuilder.Append("                ");

            requestBodyInitializerBuilder.Append("this.QueryOptions.Add(new QueryOption(\"");
            requestBodyInitializerBuilder.Append(param.Name.ToLowerFirstChar());
            requestBodyInitializerBuilder.Append("\", ");
            requestBodyInitializerBuilder.Append(param.Name.ToLowerFirstChar());
            requestBodyInitializerBuilder.Append("));");

            requestBodyInitializerBuilder.Append(Environment.NewLine);
            requestBodyInitializerBuilder.Append("            ");
            requestBodyInitializerBuilder.Append("}");
        }
    }

    paramStringBuilder.Remove(paramStringBuilder.Length - 1, 1);

    #>

        /// <summary>
        /// Constructs a new <#=requestType#>.
        /// </summary>
        public <#=requestType#>(<#=paramStringBuilder.ToString()#>)
            : base(requestUrl, client, options)
        {
    <#
    if (hasParameters)
    {
    #>

            <#=requestBodyInitializerBuilder.ToString()#>
    <#
    }
    #>

        }
    <#
    if (hasParameters && method.IsAction())
    {
    #>

        /// <summary>
        /// Gets the request body.
        /// </summary>
        public <#=requestType#>Body RequestBody { get; private set; }
    <#
    }
    
    var returnString = isAsync || createCollectionPage || string.IsNullOrEmpty(sendAsyncReturnType)
        ? "async " + methodReturnType
        : methodReturnType;
    #>

        /// <summary>
        /// Issues the <#=httpMethod#> request.
        /// </summary>
        public <#=returnString#> <#=httpMethod.ToLower().ToCheckedCase()#>Async()
        {
    <#
    bool includeRequestBody = hasParameters && method.IsAction();
    var methodParameter = "null";
    if (includeRequestBody)
    {
        methodParameter = "this.RequestBody";
    }

    if (!isAsync && createCollectionPage)
    {
    #>

            var response = await this.SendAsync<<#=entityName#><#=methodName#>CollectionResponse>(<#=methodParameter#>);
            if (response != null && response.Value != null && response.Value.CurrentPage != null)
            {
                if (response.AdditionalData != null)
                {
                    response.Value.AdditionalData = response.AdditionalData;
                    
                    object nextPageLink;
                    response.AdditionalData.TryGetValue("@odata.nextLink", out nextPageLink);

                    var nextPageLinkString = nextPageLink as string;

                    if (!string.IsNullOrEmpty(nextPageLinkString))
                    {
                        response.Value.InitializeNextPageRequest(
                            this.Client,
                            nextPageLinkString);
                    }
                }
            <#
            if (isSpecialCollection && returnTypeObject != null)
            {
                foreach (var property in returnTypeObject.Properties)
                {
                    if (!property.LongDescriptionContains("ignorableCollection"))
                    {
                        var propertyName = property.Name.Substring(property.Name.IndexOf('.') + 1).ToCheckedCase();
            #>

                response.Value.<#=propertyName#> = response.<#=propertyName#>;
            <#
                    }
                }
            }
            #>

                return response.Value;
            }

            return null;
    <#
    }
    else if (isAsync)
    {
    #>
    
            using (var response = await this.SendRequestAsync(<#=methodParameter#>))
            {
                return new <#=monitorType#>(this.Client, response.Headers.Location.ToString());
            }
    <#
    }
    else
    {

        if (string.Equals(sendAsyncReturnType, "Stream"))
        {
    #>

            return this.SendStreamRequestAsync(null);
    <#
        }
        else if (!string.IsNullOrEmpty(sendAsyncReturnType))
        {
    #>

            return this.SendAsync<<#=sendAsyncReturnType#>>(<#=methodParameter#>);
    <#
        }
        else
        {
    #>

            await this.SendAsync(<#=methodParameter#>);
    <#
        }
    }
    #>

        }
    <#
    if (!string.Equals(sendAsyncReturnType, "Stream"))
    {
    #>

        /// <summary>
        /// Adds the specified expand value to the request.
        /// </summary>
        /// <param name="value">The expand value.</param>
        /// <returns>The request object to send.</returns>
        public I<#=requestType#> Expand(string value)
        {
            this.QueryOptions.Add(new QueryOption("$expand", value));
            return this;
        }

        /// <summary>
        /// Adds the specified select value to the request.
        /// </summary>
        /// <param name="value">The select value.</param>
        /// <returns>The request object to send.</returns>
        public I<#=requestType#> Select(string value)
        {
            this.QueryOptions.Add(new QueryOption("$select", value));
            return this;
        }

        /// <summary>
        /// Adds the specified top value to the request.
        /// </summary>
        /// <param name="value">The top value.</param>
        /// <returns>The request object to send.</returns>
        public I<#=requestType#> Top(int value)
        {
            this.QueryOptions.Add(new QueryOption("$top", value.ToString()));
            return this;
        }
    <#
    }
    #>

    }
}
