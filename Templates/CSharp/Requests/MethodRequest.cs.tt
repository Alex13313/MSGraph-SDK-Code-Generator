<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="SharedCSharp.template.tt"#>
<#

var method = host.CurrentType.AsOdcmMethod();
var entityName = method.Class.Name.ToCheckedCase();
var isAction = method.IsAction();
var httpMethod = isAction ? "POST" : "GET";
var methodName = method.Name.Substring(method.Name.IndexOf('.') + 1).ToCheckedCase();
var requestType = entityName + methodName + "Request";

var returnEntityType = method.ReturnType == null ? null : method.ReturnType.Name.GetTypeString().ToCheckedCase();
var returnTypeObject = method.ReturnType == null ? null : method.ReturnType.AsOdcmClass();

var isCollection = method.IsCollection;

var sendAsyncReturnType = isCollection
    ? "I" + entityName + methodName + "CollectionPage"
    : returnEntityType;
        
var methodReturnType = sendAsyncReturnType == null
    ? "Task"
    : "Task<" + sendAsyncReturnType + ">";

string methodOverloadReturnType = methodReturnType;
    
if (isCollection)
{
    methodReturnType = string.Concat("async ", methodReturnType);
}
        
bool hasParameters = method.Parameters != null && method.Parameters.Any();
bool includeRequestBody = hasParameters && isAction;
bool returnsStream = string.Equals(sendAsyncReturnType, "Stream");
#>

namespace <#=method.Namespace.GetNamespaceName()#>
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;
    
    using Microsoft.Graph.Core;

    /// <summary>
    /// The type <#=requestType#>.
    /// </summary>
    public partial class <#=requestType#> : BaseRequest, I<#=requestType#>
    {
    <#
    var paramStringBuilder = new System.Text.StringBuilder();
    var requestBodyInitializerBuilder = new System.Text.StringBuilder();

    paramStringBuilder.Append(Environment.NewLine);
    paramStringBuilder.Append("            ");
    paramStringBuilder.Append("string requestUrl,");
    paramStringBuilder.Append(Environment.NewLine);
    paramStringBuilder.Append("            ");
    paramStringBuilder.Append("IBaseClient client,");
    paramStringBuilder.Append(Environment.NewLine);
    paramStringBuilder.Append("            ");
    paramStringBuilder.Append("IEnumerable<Option> options");

    requestBodyInitializerBuilder.Append("this.Method = \"" + httpMethod + "\";");
    
    // Sort the method parameters by required then optional to match the ordering in request builder initialization.
    var methodParameters = new List<OdcmParameter>();
    methodParameters.AddRange(method.Parameters.Where(param => !param.IsNullable));
    methodParameters.AddRange(method.Parameters.Where(param => param.IsNullable));

    if (includeRequestBody)
    {
        paramStringBuilder.Append(",");
        
        requestBodyInitializerBuilder.Append(Environment.NewLine);
        requestBodyInitializerBuilder.Append("            ");
        requestBodyInitializerBuilder.Append("this.ContentType = \"application/json\";");
        requestBodyInitializerBuilder.Append(Environment.NewLine);
        requestBodyInitializerBuilder.Append("            ");
        requestBodyInitializerBuilder.Append("this.RequestBody = new " + requestType + "Body();");
        
        foreach (var param in methodParameters)
        {
            var paramTypeString = param.Type.GetTypeString();
            
            if (param.IsCollection)
            {
                paramTypeString = string.Format("IEnumerable<{0}>", paramTypeString);
            }
            else if (!param.Type.IsTypeNullable())
            {
                paramTypeString = string.Format("{0}?", paramTypeString);
            }

            paramStringBuilder.Append(Environment.NewLine);
            paramStringBuilder.Append("            ");

            var paramLowerChar = param.Name.ToLowerFirstChar();
            
            paramStringBuilder.AppendFormat("{0} {1} = null,", paramTypeString, paramLowerChar);
     
            requestBodyInitializerBuilder.Append(Environment.NewLine);
            requestBodyInitializerBuilder.Append("            ");
            
            if (!param.IsNullable && !param.Type.IsTypeNullable() && !param.IsCollection)
            {
                requestBodyInitializerBuilder.Append(Environment.NewLine);
                requestBodyInitializerBuilder.Append("            ");
                requestBodyInitializerBuilder.AppendFormat("if ({0}.HasValue)", paramLowerChar);
                requestBodyInitializerBuilder.Append(Environment.NewLine);
                requestBodyInitializerBuilder.Append("            ");
                requestBodyInitializerBuilder.Append("{");
                requestBodyInitializerBuilder.Append(Environment.NewLine);
                requestBodyInitializerBuilder.Append("                ");
                requestBodyInitializerBuilder.Append("this.RequestBody.");
                requestBodyInitializerBuilder.Append(param.Name.ToCheckedCase());
                requestBodyInitializerBuilder.Append(" = ");
                requestBodyInitializerBuilder.Append(paramLowerChar);
                requestBodyInitializerBuilder.Append(".Value;");
                requestBodyInitializerBuilder.Append(Environment.NewLine);
                requestBodyInitializerBuilder.Append("            ");
                requestBodyInitializerBuilder.Append("}");
            }
            else
            {
                requestBodyInitializerBuilder.Append("this.RequestBody.");
                requestBodyInitializerBuilder.Append(param.Name.ToCheckedCase());
                requestBodyInitializerBuilder.Append(" = ");
                requestBodyInitializerBuilder.Append(paramLowerChar);
                requestBodyInitializerBuilder.Append(";");
            }
        }
        
        paramStringBuilder.Remove(paramStringBuilder.Length - 1, 1);
    }

    #>

        /// <summary>
        /// Constructs a new <#=requestType#>.
        /// </summary>
        public <#=requestType#>(<#=paramStringBuilder.ToString()#>)
            : base(requestUrl, client, options)
        {
            <#=requestBodyInitializerBuilder.ToString()#>
        }
    <#
    if (hasParameters && method.IsAction())
    {
    #>

        /// <summary>
        /// Gets the request body.
        /// </summary>
        public <#=requestType#>Body RequestBody { get; private set; }
    <#
    }

    var methodReturnTag = sendAsyncReturnType == null
        ? "The task to await."
        : string.Concat("The", sendAsyncReturnType);
        
    var methodParameter = "null";
    if (includeRequestBody)
    {
        methodParameter = "this.RequestBody";
    }
    
    string sendParameterHeadersForOverload, sendOverloadParameters;
    
    if (returnsStream)
    {
        sendParameterHeadersForOverload = @"/// <param name=""cancellationToken"">The <see cref=""CancellationToken""/> for the request.</param>
        /// <param name=""httpCompletionOption"">The <see cref=""HttpCompletionOption""/> for the request.</param>";
        
        sendOverloadParameters = "CancellationToken cancellationToken, HttpCompletionOption httpCompletionOption = HttpCompletionOption.ResponseContentRead";
    }
    else
    {
        sendParameterHeadersForOverload = "/// <param name=\"cancellationToken\">The <see cref=\"CancellationToken\"/> for the request.</param>";
        sendOverloadParameters = "CancellationToken cancellationToken";
    }
        
    #>

        /// <summary>
        /// Issues the <#=httpMethod#> request.
        /// </summary>
        public <#=methodOverloadReturnType#> <#=httpMethod.ToLower().ToCheckedCase()#>Async()
        {
            return this.<#=httpMethod.ToLower().ToCheckedCase()#>Async(CancellationToken.None);
        }
        
        /// <summary>
        /// Issues the <#=httpMethod#> request.
        /// </summary>
        /// <#=sendParameterHeadersForOverload#>
        /// <returns><#=methodReturnTag#></returns>
        public <#=methodReturnType#> <#=httpMethod.ToLower().ToCheckedCase()#>Async(<#=sendOverloadParameters#>)
        {
    <#

    if (isCollection)
    {
    #>

            var response = await this.SendAsync<<#=entityName#><#=methodName#>CollectionResponse>(<#=methodParameter#>, cancellationToken).ConfigureAwait(false);
            if (response != null && response.Value != null && response.Value.CurrentPage != null)
            {
                if (response.AdditionalData != null)
                {
                    response.Value.AdditionalData = response.AdditionalData;
                    
                    object nextPageLink;
                    response.AdditionalData.TryGetValue("@odata.nextLink", out nextPageLink);

                    var nextPageLinkString = nextPageLink as string;

                    if (!string.IsNullOrEmpty(nextPageLinkString))
                    {
                        response.Value.InitializeNextPageRequest(
                            this.Client,
                            nextPageLinkString);
                    }
                }

                return response.Value;
            }

            return null;
    <#
    }
    else if (returnsStream)
    {
    #>

            return this.SendStreamRequestAsync(null, httpCompletionOption, cancellationToken);
    <#
    }
    else if (!string.IsNullOrEmpty(sendAsyncReturnType))
    {
    #>

            return this.SendAsync<<#=sendAsyncReturnType#>>(<#=methodParameter#>, cancellationToken);
    <#
    }
    else
    {
    #>

            return this.SendAsync(<#=methodParameter#>, cancellationToken); 
    <#
    }
    #>

        }
    <#
    if (!returnsStream)
    {
    #>

        /// <summary>
        /// Adds the specified expand value to the request.
        /// </summary>
        /// <param name="value">The expand value.</param>
        /// <returns>The request object to send.</returns>
        public I<#=requestType#> Expand(string value)
        {
            this.QueryOptions.Add(new QueryOption("$expand", value));
            return this;
        }

        /// <summary>
        /// Adds the specified select value to the request.
        /// </summary>
        /// <param name="value">The select value.</param>
        /// <returns>The request object to send.</returns>
        public I<#=requestType#> Select(string value)
        {
            this.QueryOptions.Add(new QueryOption("$select", value));
            return this;
        }
    <#
        if (isCollection)
        {
    #>

        /// <summary>
        /// Adds the specified top value to the request.
        /// </summary>
        /// <param name="value">The top value.</param>
        /// <returns>The request object to send.</returns>
        public I<#=requestType#> Top(int value)
        {
            this.QueryOptions.Add(new QueryOption("$top", value.ToString()));
            return this;
        }
		
        /// <summary>
        /// Adds the specified filter value to the request.
        /// </summary>
        /// <param name="value">The filter value.</param>
        /// <returns>The request object to send.</returns>
        public I<#=requestType#> Filter(string value)
        {
            this.QueryOptions.Add(new QueryOption("$filter", value));
            return this;
        }

        /// <summary>
        /// Adds the specified skip value to the request.
        /// </summary>
        /// <param name="value">The skip value.</param>
        /// <returns>The request object to send.</returns>
        public I<#=requestType#> Skip(int value)
        {
            this.QueryOptions.Add(new QueryOption("$skip", value.ToString()));
            return this;
        }

        /// <summary>
        /// Adds the specified orderby value to the request.
        /// </summary>
        /// <param name="value">The orderby value.</param>
        /// <returns>The request object to send.</returns>
        public I<#=requestType#> OrderBy(string value)
        {
            this.QueryOptions.Add(new QueryOption("$orderby", value));
            return this;
        }
    <#
        }
    }
    #>

    }
}
