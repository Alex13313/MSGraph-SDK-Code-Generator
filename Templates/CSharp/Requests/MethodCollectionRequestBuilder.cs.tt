<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="SharedCSharp.template.tt"#>
<#

var clientName = model.GetEntityContainer().ToCheckedCase() + "Client";
var clientNameLower = clientName.ToLowerFirstChar();

var method = host.CurrentType.AsOdcmMethod();
var returnType = method.ReturnType;
var responseTypeName = returnType.Name.ToCheckedCase();
var responseNamePrefix = responseTypeName + method.Name.Substring(method.Name.IndexOf('.') + 1).ToCheckedCase();
var collectionRequest = responseNamePrefix + "CollectionRequest";
var collectionRequestBuilder = collectionRequest + "Builder";
var entityRequestBuilder = responseNamePrefix + "CollectionRequestBuilder";

#>

namespace Microsoft.OneDrive.Sdk
{
    using System.Collections.Generic;

    /// <summary>
    /// The type <#=collectionRequestBuilder#>.
    /// </summary>
    public partial class <#=collectionRequestBuilder#> : BaseRequestBuilder, I<#=collectionRequestBuilder#>
    {
        /// <summary>
        /// Constructs a new <#=collectionRequestBuilder#>.
        /// </summary>
        /// <param name="requestUrl">The URL for the built request.</param>
        /// <param name="<#=clientNameLower#>">The <see cref="I<#=clientName#>"/> for handling requests.</param>
        public <#=collectionRequestBuilder#>(
            string requestUrl,
            I<#=clientName#> <#=clientNameLower#>)
            : base(requestUrl, <#=clientNameLower#>)
        {
        }

        /// <summary>
        /// Builds the request.
        /// </summary>
        /// <returns>The built request.</returns>
        public I<#=collectionRequest#> Request()
        {
            return this.Request(null);
        }

        /// <summary>
        /// Builds the request.
        /// </summary>
        /// <param name="options">The query and header options for the request.</param>
        /// <returns>The built request.</returns>
        public I<#=collectionRequest#> Request(IList<Option> options)
        {
            return new <#=collectionRequest#>(this.RequestUrl, this.<#=clientName#>, options);
        }

        /// <summary>
        /// Gets an <see cref="I<#=entityRequestBuilder#>"/> for the specified <#=responseTypeName#>.
        /// </summary>
        /// <param name="id">The ID for the <#=responseTypeName#>.</param>
        /// <returns>The <see cref="I<#=entityRequestBuilder#>"/>.</returns>
        public I<#=entityRequestBuilder#> this[string id]
        {
            get
            {
                return new <#=entityRequestBuilder#>(this.AppendSegmentToRequestUrl(id), this.<#=clientName#>);
            }
        }
    }
}
