<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="SharedCSharp.template.tt"#>
<#

var clientName = model.GetEntityContainer().ToCheckedCase() + "Client";
var clientNameLower = clientName.ToLowerFirstChar();
OdcmClass entity = host.CurrentType.AsOdcmClass();
var entityName = entity.Name.ToCheckedCase();
var entityRequest = entityName + "Request";

#>

namespace Microsoft.OneDrive.Sdk
{
    using System.Collections.Generic;
    using System.Threading.Tasks;

    /// <summary>
    /// The type <#=entityRequest#>.
    /// </summary>
    public partial class <#=entityRequest#> : BaseRequest, I<#=entityRequest#>
    {
        /// <summary>
        /// Constructs a new <#=entityRequest#>.
        /// </summary>
        /// <param name="requestUrl">The request URL.</param>
        /// <param name="<#=clientNameLower#>">The <see cref="I<#=clientName#>"/> for handling requests.</param>
        /// <param name="options">Query option name value pairs for the request.</param>
        public <#=entityRequest#>(
            string requestUrl,
            I<#=clientName#> <#=clientNameLower#>,
            IList<Option> options)
            : base(requestUrl, <#=clientNameLower#>, options)
        {
        }

        /// <summary>
        /// Creates the specified <#=entityName#> using PUT.
        /// </summary>
        /// <param name="<#=entity.Name#>">The <#=entityName#> to create.</param>
        /// <returns>The created <#=entityName#>.</returns>
        public async Task<<#=entityName#>> CreateAsync(<#=entityName#> <#=entity.Name#>)
        {
            this.ContentType = "<#=writer.jsonContentType#>";
            this.Method = "PUT";
            var entity = await this.SendAsync<<#=entityName#>>(<#=entity.Name#>);
            this.InitializeCollectionProperties(entity);
            return entity;
        }

        /// <summary>
        /// Deletes the specified <#=entityName#>.
        /// </summary>
        /// <returns>The task to await.</returns>
        public async Task DeleteAsync()
        {
            this.Method = "DELETE";
            await this.SendAsync<<#=entityName#>>(null);
        }

        /// <summary>
        /// Gets the <#=entityName#>.
        /// </summary>
        /// <returns>The <#=entityName#>.</returns>
        public async Task<<#=entityName#>> GetAsync()
        {
            this.Method = "GET";
            var entity = await this.SendAsync<<#=entityName#>>(null);
            this.InitializeCollectionProperties(entity);
            return entity;
        }

        /// <summary>
        /// Updates the specified <#=entityName#> using PATCH.
        /// </summary>
        /// <param name="<#=entity.Name#>">The <#=entityName#> to update.</param>
        /// <returns>The updated <#=entityName#>.</returns>
        public async Task<<#=entityName#>> UpdateAsync(<#=entityName#> <#=entity.Name#>)
        {
            this.ContentType = "<#=writer.jsonContentType#>";
            this.Method = "PATCH";
            var entity = await this.SendAsync<<#=entityName#>>(<#=entity.Name#>);
            this.InitializeCollectionProperties(entity);
            return entity;
        }

        /// <summary>
        /// Adds the specified expand value to the request.
        /// </summary>
        /// <param name="value">The expand value.</param>
        /// <returns>The request object to send.</returns>
        public I<#=entityRequest#> Expand(string value)
        {
            this.QueryOptions.Add(new QueryOption("expand", value));
            return this;
        }

        /// <summary>
        /// Adds the specified select value to the request.
        /// </summary>
        /// <param name="value">The select value.</param>
        /// <returns>The request object to send.</returns>
        public I<#=entityRequest#> Select(string value)
        {
            this.QueryOptions.Add(new QueryOption("select", value));
            return this;
        }
        
        /// <summary>
        /// Adds the specified top value to the request.
        /// </summary>
        /// <param name="value">The top value.</param>
        /// <returns>The request object to send.</returns>
        public I<#=entityRequest#> Top(string value)
        {
            this.QueryOptions.Add(new QueryOption("top", value));
            return this;
        }

        /// <summary>
        /// Initializes any collection properties after deserialization, like next requests for paging.
        /// </summary>
        /// <param name="<#=entity.Name#>">The <see cref="<#=entityName#>"/> with the collection properties to initialize.</param>
        private void InitializeCollectionProperties(<#=entityName#> <#=entity.Name#>)
        {
        <#
        var collectionProperties = entity.Properties.Where(property => property.IsCollection() && property.GetTypeString().IsComplex());

        if (collectionProperties.Any())
        {
        #>

            if (<#=entity.Name#> != null && <#=entity.Name#>.AdditionalData != null)
            {
        <#
            foreach(var property in collectionProperties)
            {
                var propertyName = property.Name.ToCheckedCase().GetSanitizedPropertyName();
                var propertyType = property.GetTypeString();
        #>

                if (<#=entity.Name#>.<#=propertyName#> != null && <#=entity.Name#>.<#=propertyName#>.CurrentPage != null)
                {
                    <#=entity.Name#>.<#=propertyName#>.AdditionalData = <#=entity.Name#>.AdditionalData;

                    object nextPageLink;
                    <#=entity.Name#>.AdditionalData.TryGetValue("<#=propertyName.ToLowerFirstChar()#>@odata.nextLink", out nextPageLink);
                    var nextPageLinkString = nextPageLink as string;

                    if (!string.IsNullOrEmpty(nextPageLinkString))
                    {
                        <#=entity.Name#>.<#=propertyName#>.InitializeNextPageRequest(
                            this.<#=clientName#>,
                            nextPageLinkString);
                    }
                }
        <#
            }
        #>

            }

        <#
        }
        #>

        }
    }
}
