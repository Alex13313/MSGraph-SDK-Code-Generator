<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="EntityRequest.Base.template.tt"#>
<#

OdcmClass entity = host.CurrentType.AsOdcmClass();
var entityName = this.GetEntityNameString(entity);

var prop = host.CurrentType.AsOdcmProperty();
var projection = (prop != null) ? prop.Projection : null;
var canCreate = projection != null ? projection.SupportsInsert() : true;
var canDelete = projection != null ? projection.SupportsDelete() : true;
var canUpdate = projection != null ? projection.SupportsUpdate() : true;
var canExpand = projection != null ? projection.SupportsExpand() : true;

#>

namespace <#=this.GetNamespaceName(entity)#>
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    <#=this.GetEntityRequestClassDefinition(entity)#>
    {
        <#=this.GetEntityRequestConstructor(entity)#>
<#
    if (canCreate)
    {
        Write("\n        ");
        Write(this.GetEntityCreateAsyncMethod(entity));
        Write("\n");
    }

    if (canDelete)
    {
        Write("\n        ");
        Write(this.GetEntityDeleteAsyncMethod(entity));
        Write("\n");
    }
#>

        <#=this.GetEntityGetAsyncMethod(entity)#>
<#
    if (canUpdate)
    {
        Write("\n        ");
        Write(this.GetEntityUpdateAsyncMethod(entity));
        Write("\n");
    }

    if (canExpand)
    {
        Write("\n        ");
        Write(this.GetEntityExpandMethod(entity));
        Write("\n");
    }
#>

        <#=this.GetEntitySelectMethod(entity)#>

        /// <summary>
        /// Initializes any collection properties after deserialization, like next requests for paging.
        /// </summary>
        /// <param name="<#=entity.Name#>ToInitialize">The <see cref="<#=entityName#>"/> with the collection properties to initialize.</param>
        private void InitializeCollectionProperties(<#=entityName#> <#=entity.Name#>ToInitialize)
        {
        <#
        var navigationCollectionProperties = entity.Properties.Where(property => property.IsCollection() && property.IsNavigation());

        if (navigationCollectionProperties.Any())
        {
        #>

            if (<#=entity.Name#>ToInitialize != null && <#=entity.Name#>ToInitialize.AdditionalData != null)
            {
        <#
            foreach(var property in navigationCollectionProperties)
            {
                var propertyName = property.Name.ToCheckedCase().GetSanitizedPropertyName();
                var propertyType = property.GetTypeString();
                
                if (propertyType.IsComplex())
                {
        #>

                if (<#=entity.Name#>ToInitialize.<#=propertyName#> != null && <#=entity.Name#>ToInitialize.<#=propertyName#>.CurrentPage != null)
                {
                    <#=entity.Name#>ToInitialize.<#=propertyName#>.AdditionalData = <#=entity.Name#>ToInitialize.AdditionalData;

                    object nextPageLink;
                    <#=entity.Name#>ToInitialize.AdditionalData.TryGetValue("<#=propertyName.ToLowerFirstChar()#>@odata.nextLink", out nextPageLink);
                    var nextPageLinkString = nextPageLink as string;

                    if (!string.IsNullOrEmpty(nextPageLinkString))
                    {
                        <#=entity.Name#>ToInitialize.<#=propertyName#>.InitializeNextPageRequest(
                            this.Client,
                            nextPageLinkString);
                    }
                }
        <#
                }
            }
        #>

            }

        <#
        }
        #>

        }
    }
}
