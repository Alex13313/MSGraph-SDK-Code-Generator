<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="EntityRequestBuilder.Base.template.tt"#>
<#

OdcmClass entity = host.CurrentType.AsOdcmClass();
var entityName = this.GetEntityNameString(entity);
var request = this.GetEntityRequestName(entity);
var requestBuilder = this.GetEntityRequestBuilderName(entity);

#>

namespace <#=this.GetNamespaceName(entity)#>
{
    using System;
    using System.Collections.Generic;

    <#=this.GetEntityRequestBuilderClassDefinition(entity)#>
    {
        <#=this.GetEntityRequestBuilderConstructor(entity)#>

        <#=this.GetEntityRequestMethod(entity)#>

        <#=this.GetEntityRequestMethodWithOptions(entity)#>      
    <#
    if (entity.NavigationProperties().Any())
    {
    #>
    
        <#=this.GetNavigationProperties(entity)#>
    <#
    }

    bool contentStreamFound = false;
    foreach(var prop in entity.GetProperties(typeName:"Stream"))
    {
        var propName = prop.Name.ToCheckedCase();
        if (propName.Equals("Content"))
        {
            contentStreamFound = true;
        }
        
        var propRequestBuilder = propName + "RequestBuilder";
    #>

        /// <summary>
        /// Gets the request builder for <#=propName#>.
        /// </summary>
        /// <returns>The <see cref="I<#=entityName#><#=propRequestBuilder#>"/>.</returns>
        public I<#=entityName#><#=propRequestBuilder#> <#=propName#>
        {
            get
            {
                return new <#=entityName#><#=propRequestBuilder#>(this.AppendSegmentToRequestUrl("<#=prop.Name#>"), this.Client);
            }
        }
    <#
    }
    
    if (entity.Kind == OdcmClassKind.MediaEntity && !contentStreamFound)
    {
    #>
    
        /// <summary>
        /// Gets the request builder for Content.
        /// </summary>
        /// <returns>The <see cref="I<#=entityName#>ContentRequestBuilder"/>.</returns>
        public I<#=entityName#>ContentRequestBuilder Content
        {
            get
            {
                return new <#=entityName#>ContentRequestBuilder(this.AppendSegmentToRequestUrl("$value"), this.Client);
            }
        }
    <#
    }

    foreach(var method in entity.Methods)
    {
        var methodName = method.Name.Substring(method.Name.IndexOf('.') + 1).ToCheckedCase();
        var baseName = method.Class.Name.ToCheckedCase() + methodName;

        var paramStringBuilder = new System.Text.StringBuilder();
        var builderInitializerStringBuilder = new System.Text.StringBuilder();

        builderInitializerStringBuilder.Append(Environment.NewLine);
        builderInitializerStringBuilder.Append("                ");
        builderInitializerStringBuilder.AppendFormat("this.AppendSegmentToRequestUrl(\"{0}.{1}\"),", method.Namespace.Name, method.Name);
        builderInitializerStringBuilder.Append(Environment.NewLine);
        builderInitializerStringBuilder.Append("                ");
        builderInitializerStringBuilder.Append("this.Client,");

        var hasParameters = method.Parameters != null && method.Parameters.Any();

        if (hasParameters)
        {
            var requiredParameters = method.Parameters.Where(param => !param.IsNullable);
            var optionalParameters = method.Parameters.Where(param => param.IsNullable);
            
            foreach (var param in requiredParameters)
            {
                var paramTypeString = param.Type.IsTypeNullable() ? param.Type.GetTypeString() : param.Type.GetTypeString() + "?";

                paramStringBuilder.Append(Environment.NewLine);
                paramStringBuilder.Append("            ");
                paramStringBuilder.Append(param.Type.GetTypeString());
                paramStringBuilder.Append(" ");
                paramStringBuilder.Append(param.Name.ToLowerFirstChar());
                paramStringBuilder.Append(",");

                builderInitializerStringBuilder.Append(Environment.NewLine);
                builderInitializerStringBuilder.Append("                ");
                builderInitializerStringBuilder.Append(param.Name.ToLowerFirstChar() + ",");
            }
            
            foreach (var param in optionalParameters)
            {
                var paramTypeString = param.Type.IsTypeNullable() ? param.Type.GetTypeString() : param.Type.GetTypeString() + "?";

                paramStringBuilder.Append(Environment.NewLine);
                paramStringBuilder.Append("            ");
                paramStringBuilder.Append(paramTypeString);
                paramStringBuilder.Append(" ");
                paramStringBuilder.Append(param.Name.ToLowerFirstChar());
                paramStringBuilder.Append(" = null,");

                builderInitializerStringBuilder.Append(Environment.NewLine);
                builderInitializerStringBuilder.Append("                ");
                builderInitializerStringBuilder.Append(param.Name.ToLowerFirstChar() + ",");
            }

            paramStringBuilder.Remove(paramStringBuilder.Length - 1, 1);
        }
        
        builderInitializerStringBuilder.Remove(builderInitializerStringBuilder.Length - 1, 1);
    #>

        /// <summary>
        /// Gets the request builder for <#=baseName#>.
        /// </summary>
        /// <returns>The <see cref="I<#=baseName#>RequestBuilder"/>.</returns>
        public I<#=baseName#>RequestBuilder <#=methodName#>(<#=paramStringBuilder.ToString()#>)
        {
            return new <#=baseName#>RequestBuilder(<#=builderInitializerStringBuilder.ToString()#>);
        }
    <#
    }
    #>

    }
}
