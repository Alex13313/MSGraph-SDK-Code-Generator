<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="SharedCSharp.template.tt"#>
<#
var entityContainer = model.EntityContainer;
var clientName = entityContainer.Name.ToCheckedCase() + "Client";
#>

namespace <#=entityContainer.Namespace.GetNamespaceName()#>
{

    /// <summary>
    /// The type <#=clientName#>.
    /// </summary>
    public partial class <#=clientName#> : BaseClient, I<#=clientName#>
    {

        /// <summary>
        /// Instantiates a new <#=clientName#>.
        /// </summary>
        public <#=clientName#>(
            AppConfig appConfig,
            CredentialCache credentialCache = null,
            IHttpProvider httpProvider = null,
            IServiceInfoProvider serviceInfoProvider = null,
            ClientType clientType = ClientType.Consumer)
            : base(appConfig, credentialCache, httpProvider, serviceInfoProvider, clientType)
        {
        }
    <#

    foreach(var prop in model.EntityContainer.Properties)
    {
        var propName = prop.Name.ToCheckedCase();
        var sanitizedPropName = propName.GetSanitizedPropertyName();

        if (prop.IsCollection())
        {
            var collectionRequestBuilder = propName + "CollectionRequestBuilder";
    #>

        /// <summary>
        /// Gets the <#=propName#> request builder.
        /// </summary>
        public I<#=collectionRequestBuilder#> <#=sanitizedPropName#>
        {
            get
            {
                return new <#=collectionRequestBuilder#>(this.BaseUrl + "/<#=prop.Name#>", this);
            }
        }
    <#
        }
        else
        {
            var requestBuilder = prop.Type.Name.ToCheckedCase() + "RequestBuilder";
    #>

        /// <summary>
        /// Gets the <#=propName#> request builder.
        /// </summary>
        public I<#=requestBuilder#> <#=sanitizedPropName#>
        {
            get
            {
                return new <#=requestBuilder#>(this.BaseUrl + "/<#=prop.Name#>", this);
            }
        }
    <#
        }
    }
    #>

    }
}
