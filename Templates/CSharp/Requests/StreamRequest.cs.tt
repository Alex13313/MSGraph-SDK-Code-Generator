<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="SharedCSharp.template.tt"#>
<#

var prop = host.CurrentType.AsOdcmProperty();

string propName = null;
string propClass = null;
string propRequest = null;
string namespaceValue = null;

// If the current type isn't a property it's a content $value stream for a media entity
if (prop == null)
{
    var entity = host.CurrentType.AsOdcmClass();
    propName = "content";
    propClass = entity.Name.ToCheckedCase();
    propRequest = propClass + "ContentRequest";
    namespaceValue = entity.Namespace.GetNamespaceName();
}
else
{
    propName = prop.Name;
    propClass = prop.Class.Name.ToCheckedCase();
    propRequest = propClass + prop.Name.ToCheckedCase() + "Request";
    namespaceValue = prop.Class.AsOdcmClass().Namespace.GetNamespaceName();
}
#>

namespace <#=namespaceValue#>
{
    using System.Collections.Generic;
    using System.IO;
    using System.Threading.Tasks;

    /// <summary>
    /// The type <#=propRequest#>.
    /// </summary>
    public partial class <#=propRequest#> : BaseRequest, I<#=propRequest#>
    {
        /// <summary>
        /// Constructs a new <#=propRequest#>.
        /// <param name="requestUrl">The request URL.</param>
        /// <param name="client">The <see cref="IBaseClient"/> for handling requests.</param>
        /// <param name="options">Query option name value pairs for the request.</param>
        /// </summary>
        public <#=propRequest#>(
            string requestUrl,
            IBaseClient client,
            IList<Option> options)
            : base(requestUrl, client, options)
        {
        }

        /// <summary>
        /// Gets the stream.
        /// </summary>
        /// <returns>The stream.</returns>
        public Task<Stream> GetAsync()
        {
            this.Method = "GET";
            return this.SendStreamRequestAsync(null);
        }

        /// <summary>
        /// PUTs the specified stream.
        /// </summary>
        /// <typeparam name="T">The type returned by the PUT call.</typeparam>
        /// <param name="<#=propName#>">The stream to PUT.</param>
        /// <returns>The object returned by the PUT call.</returns>
        public Task<T> PutAsync<T>(Stream <#=propName#>) where T : <#=propClass#>
        {
            this.Method = "PUT";
            return this.SendAsync<T>(<#=propName#>);
        }
    }
}
