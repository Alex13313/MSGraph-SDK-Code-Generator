<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="CollectionRequest.Base.template.tt"#>
<#
var prop = host.CurrentType.AsOdcmProperty();
var innerEntity = prop.Type;
var innerEntityType = innerEntity.Name.ToCheckedCase();
var collectionRequest = prop.Name.ToCheckedCase() + "CollectionRequest";
var collectionResponse = prop.Name.ToCheckedCase() + "CollectionResponse";
var collectionPage = prop.Name.ToCheckedCase() + "CollectionPage";

#>

namespace <#=this.GetNamespaceName(prop.Class.AsOdcmClass())#>
{
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    <#=this.GetCollectionClassDefinition(prop)#>
    {
        <#=GetCollectionRequestConstructor(prop)#>
        <#=GetPostAsyncMethod(prop)#>  
        /// <summary>
        /// Gets the collection page.
        /// </summary>
        /// <returns>The collection page.</returns>
        public Task<I<#=collectionPage#>> GetAsync()
        {
            return this.GetAsync(HttpCompletionOption.ResponseContentRead, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets the collection page.
        /// </summary>
        /// <param name="completionOption">The <see cref="HttpCompletionOption"/> to pass to the <see cref="IHttpProvider"/> on send.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The collection page.</returns>
        public async Task<I<#=collectionPage#>> GetAsync(HttpCompletionOption completionOption, CancellationToken cancellationToken)
        {
            this.Method = "GET";
            var response = await this.SendAsync<<#=collectionResponse#>>(null, completionOption, cancellationToken).ConfigureAwait(false);
            if (response != null && response.Value != null && response.Value.CurrentPage != null)
            {
                if (response.AdditionalData != null)
                {
                    object nextPageLink;
                    response.AdditionalData.TryGetValue("@odata.nextLink", out nextPageLink);

                    var nextPageLinkString = nextPageLink as string;

                    if (!string.IsNullOrEmpty(nextPageLinkString))
                    {
                        response.Value.InitializeNextPageRequest(
                            this.Client,
                            nextPageLinkString);
                    }
                }

                return response.Value;
            }

            return null;
        }

        /// <summary>
        /// Adds the specified expand value to the request.
        /// </summary>
        /// <param name="value">The expand value.</param>
        /// <returns>The request object to send.</returns>
        public I<#=collectionRequest#> Expand(string value)
        {
            this.QueryOptions.Add(new QueryOption("$expand", value));
            return this;
        }

        /// <summary>
        /// Adds the specified select value to the request.
        /// </summary>
        /// <param name="value">The select value.</param>
        /// <returns>The request object to send.</returns>
        public I<#=collectionRequest#> Select(string value)
        {
            this.QueryOptions.Add(new QueryOption("$select", value));
            return this;
        }

        /// <summary>
        /// Adds the specified top value to the request.
        /// </summary>
        /// <param name="value">The top value.</param>
        /// <returns>The request object to send.</returns>
        public I<#=collectionRequest#> Top(int value)
        {
            this.QueryOptions.Add(new QueryOption("$top", value.ToString()));
            return this;
        }
        
        /// <summary>
        /// Adds the specified filter value to the request.
        /// </summary>
        /// <param name="value">The filter value.</param>
        /// <returns>The request object to send.</returns>
        public I<#=collectionRequest#> Filter(string value)
        {
            this.QueryOptions.Add(new QueryOption("$filter", value.ToString()));
            return this;
        }
    }
}
