<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="SharedCSharp.template.tt"#>
<#

var method = host.CurrentType.AsOdcmMethod();
var entityName = method.Class.Name.ToCheckedCase();
var requestType = entityName + method.Name.Substring(method.Name.IndexOf('.') + 1).ToCheckedCase() + "Request";
var requestBuilderType = requestType + "Builder";
#>

namespace Microsoft.OneDrive.Sdk
{
    using System;
    using System.Collections.Generic;

    /// <summary>
    /// The type <#=requestBuilderType#>.
    /// </summary>
    public partial class <#=requestBuilderType#> : BaseRequestBuilder, I<#=requestBuilderType#>
    {
    <#

    System.Text.StringBuilder requestConstructorParamsStringBuilder = new System.Text.StringBuilder();

    requestConstructorParamsStringBuilder.Append(Environment.NewLine);
    requestConstructorParamsStringBuilder.Append("                ");
    requestConstructorParamsStringBuilder.Append("this.RequestUrl,");
    requestConstructorParamsStringBuilder.Append(Environment.NewLine);
    requestConstructorParamsStringBuilder.Append("                ");
    requestConstructorParamsStringBuilder.Append("this.Client,");
    requestConstructorParamsStringBuilder.Append(Environment.NewLine);
    requestConstructorParamsStringBuilder.Append("                ");

    if (method.Parameters == null || !method.Parameters.Any())
    {
        requestConstructorParamsStringBuilder.Append("options");
    #>

        public <#=requestBuilderType#>(
            string requestUrl,
            IBaseClient client)
            : base(requestUrl, client)
        {
        }
    <#
    }
    else
    {
        requestConstructorParamsStringBuilder.Append("options,");

        System.Text.StringBuilder builderConstructorParamsStringBuilder = new System.Text.StringBuilder();
        System.Text.StringBuilder initializersStringBuilder = new System.Text.StringBuilder();

        builderConstructorParamsStringBuilder.Append(Environment.NewLine);
        builderConstructorParamsStringBuilder.Append("            ");
        builderConstructorParamsStringBuilder.Append("string requestUrl,");
        builderConstructorParamsStringBuilder.Append(Environment.NewLine);
        builderConstructorParamsStringBuilder.Append("            ");
        builderConstructorParamsStringBuilder.Append("IBaseClient client,");

        foreach (var param in method.Parameters)
        {
            var paramTypeString = param.Type.GetTypeString();

            builderConstructorParamsStringBuilder.Append(Environment.NewLine);
            builderConstructorParamsStringBuilder.Append("            ");
            builderConstructorParamsStringBuilder.Append(paramTypeString);

            requestConstructorParamsStringBuilder.Append(Environment.NewLine);
            requestConstructorParamsStringBuilder.Append("                ");
            requestConstructorParamsStringBuilder.Append("this." + param.Name.ToCheckedCase() + ",");

            initializersStringBuilder.Append(Environment.NewLine);
            initializersStringBuilder.Append("                ");
            initializersStringBuilder.Append("this." + param.Name.ToCheckedCase() + " = " + param.Name.ToLowerFirstChar() + ";");

            if (param.Type.IsTypeNullable())
            {
                 builderConstructorParamsStringBuilder.Append(" " + param.Name.ToLowerFirstChar() + " = null,");
            }
            else
            {
                builderConstructorParamsStringBuilder.Append("? " + param.Name.ToLowerFirstChar() + " = null,");
            }
        }

        builderConstructorParamsStringBuilder.Remove(builderConstructorParamsStringBuilder.Length - 1, 1);
        requestConstructorParamsStringBuilder.Remove(requestConstructorParamsStringBuilder.Length - 1, 1);
    #>

        public <#=requestBuilderType#>(<#=builderConstructorParamsStringBuilder.ToString()#>)
            : base(requestUrl, client)
        {
            <#=initializersStringBuilder.ToString()#>

        }
    <#
    }

    foreach (var param in method.Parameters)  
    {
        var paramTypeString = param.Type.GetTypeString();
        if (param.Type.IsTypeNullable())
        {
    #>

        /// <summary>
        /// Gets the <#=param.Name.ToCheckedCase()#>.
        /// </summary>
        public <#=paramTypeString#> <#=param.Name.ToCheckedCase()#> { get; set; }
    <#
        }
        else
        {
    #>

        /// <summary>
        /// Gets the <#=param.Name.ToCheckedCase()#>.
        /// </summary>
        public <#=paramTypeString#>? <#=param.Name.ToCheckedCase()#> { get; set; }
    <#
        }
    }
    #>

        /// <summary>
        /// Builds the request.
        /// </summary>
        /// <param name="options">The query and header options for the request.</param>
        /// <returns>The built request.</returns>
        public I<#=requestType#> Request(IList<Option> options = null)
        {
            return new <#=requestType#>(<#=requestConstructorParamsStringBuilder.ToString()#>);
        }

    }
}
