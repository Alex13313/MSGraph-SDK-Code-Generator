<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="SharedCSharp.template.tt"#>
<#

var method = host.CurrentType.AsOdcmMethod();
var entityName = method.Class.Name.ToCheckedCase();
var isAction = method.IsAction();
var hasParameters = method.Parameters != null && method.Parameters.Any();
var requestType = entityName + method.Name.Substring(method.Name.IndexOf('.') + 1).ToCheckedCase() + "Request";
var requestBuilderType = requestType + "Builder";
#>

namespace <#=method.Namespace.GetNamespaceName()#>
{
    using System;
    using System.Collections.Generic;
    using System.Text;

    /// <summary>
    /// The type <#=requestBuilderType#>.
    /// </summary>
    public partial class <#=requestBuilderType#> : BaseRequestBuilder, I<#=requestBuilderType#>
    {
    <#

    var requestConstructorParamsStringBuilder = new StringBuilder();
    var requestUrlInitializerStringBuilder = new StringBuilder();

    if (!isAction && !hasParameters)
    {
        requestConstructorParamsStringBuilder.Append(@"
                this.RequestUrl,
                this.Client,
                options");
    #>

        public <#=requestBuilderType#>(
            string requestUrl,
            IBaseClient client)
            : base(requestUrl, client)
        {
        }
    <#
    }
    else
    {
        if (isAction)
        {
            requestConstructorParamsStringBuilder.Append(@"
                this.RequestUrl,
                this.Client,
                options,");
        }
        else
        {
            requestConstructorParamsStringBuilder.Append(@"
                functionRequestUrl,
                this.Client,
                options");
        }

        var initializersStringBuilder = new StringBuilder();
        var builderConstructorParamsStringBuilder = new StringBuilder();
        
        builderConstructorParamsStringBuilder.Append(Environment.NewLine);
        builderConstructorParamsStringBuilder.Append("            ");
        builderConstructorParamsStringBuilder.Append("string requestUrl,");
        builderConstructorParamsStringBuilder.Append(Environment.NewLine);
        builderConstructorParamsStringBuilder.Append("            ");
        builderConstructorParamsStringBuilder.Append("IBaseClient client,");

        requestUrlInitializerStringBuilder.Append("var functionParametersStringBuilder = new StringBuilder();");
        
        var requiredParameters = method.Parameters.Where(param => !param.IsNullable);
        var optionalParameters = method.Parameters.Where(param => param.IsNullable);

        foreach (var param in requiredParameters)
        {
            this.AddParameterToRequestBuilderConstructorStringBuilder(builderConstructorParamsStringBuilder, param, false);
            this.AddParameterToRequestBuilderInitializerStringBuilder(initializersStringBuilder, param);
            
            if (isAction)
            {
                this.AddParameterToRequestConstructorStringBuilder(requestConstructorParamsStringBuilder, param);
            }
            else
            {
                this.AddParameterToRequestUrlInitializerStringBuilder(requestUrlInitializerStringBuilder, param, false);
            }
        }

        foreach (var param in optionalParameters)
        {
            this.AddParameterToRequestBuilderConstructorStringBuilder(builderConstructorParamsStringBuilder, param, true);
            this.AddParameterToRequestBuilderInitializerStringBuilder(initializersStringBuilder, param);
            
            if (isAction)
            {
                this.AddParameterToRequestConstructorStringBuilder(requestConstructorParamsStringBuilder, param);
            }
            else
            {
                this.AddParameterToRequestUrlInitializerStringBuilder(requestUrlInitializerStringBuilder, param, true);
            }
        }

        builderConstructorParamsStringBuilder.Remove(builderConstructorParamsStringBuilder.Length - 1, 1);
        
        if (isAction)
        {
            // We'll only have the trailing comma in the request constructor string builder for actions. Functions add the request parameters to the URL.
            requestConstructorParamsStringBuilder.Remove(requestConstructorParamsStringBuilder.Length - 1, 1);
        }
        else
        {
            requestUrlInitializerStringBuilder.Append(Environment.NewLine);
            requestUrlInitializerStringBuilder.Append(Environment.NewLine);
            requestUrlInitializerStringBuilder.Append("            if (functionParametersStringBuilder.Length > 0)");
            requestUrlInitializerStringBuilder.Append(Environment.NewLine);
            requestUrlInitializerStringBuilder.Append("            {");
            requestUrlInitializerStringBuilder.Append(Environment.NewLine);
            requestUrlInitializerStringBuilder.Append("                functionParametersStringBuilder.Remove(functionParametersStringBuilder.Length - 1, 1);");
            requestUrlInitializerStringBuilder.Append(Environment.NewLine);
            requestUrlInitializerStringBuilder.Append("                functionRequestUrl = string.Format(\"{0}({1})\", this.RequestUrl, functionParametersStringBuilder.ToString());");
            requestUrlInitializerStringBuilder.Append(Environment.NewLine);
            requestUrlInitializerStringBuilder.Append("            }");
        }
    #>

        public <#=requestBuilderType#>(<#=builderConstructorParamsStringBuilder.ToString()#>)
            : base(requestUrl, client)
        {
            <#=initializersStringBuilder.ToString()#>

        }
    <#
    }

    foreach (var param in method.Parameters)  
    {
        var paramTypeString = param.Type.GetTypeString();
        if (param.Type.IsTypeNullable() || !param.IsNullable)
        {
    #>

        /// <summary>
        /// Gets the value of <#=param.Name.ToCheckedCase()#>.
        /// </summary>
        public <#=paramTypeString#> <#=param.Name.ToCheckedCase()#> { get; set; }
    <#
        }
        else
        {
    #>

        /// <summary>
        /// Gets the falue of <#=param.Name.ToCheckedCase()#>.
        /// </summary>
        public <#=paramTypeString#>? <#=param.Name.ToCheckedCase()#> { get; set; }
    <#
        }
    }
    #>

        /// <summary>
        /// Builds the request.
        /// </summary>
        /// <param name="options">The query and header options for the request.</param>
        /// <returns>The built request.</returns>
        public I<#=requestType#> Request(IList<Option> options = null)
        {
    <#
        if (!isAction && hasParameters)
        {
    #>
    
            var functionRequestUrl = this.RequestUrl;
            
            <#=requestUrlInitializerStringBuilder.ToString()#>
            
            return new <#=requestType#>(<#=requestConstructorParamsStringBuilder.ToString()#>);
    <#
        }
        else
        {
    #>
    
            return new <#=requestType#>(<#=requestConstructorParamsStringBuilder.ToString()#>);
    <#
        }
    #>
    
        }

    }
}

<#+

// Adds the specified parameter to the string builder for the constructor of the request builder class
private void AddParameterToRequestBuilderConstructorStringBuilder(
    StringBuilder requestBuilderConstructorParametersStringBuilder,
    OdcmParameter param,
    bool optional)
{
    var paramTypeString = param.Type.GetTypeString();
    var paramCheckedCase = param.Name.ToCheckedCase();
    var paramLowerFirstChar = param.Name.ToLowerFirstChar();

    requestBuilderConstructorParametersStringBuilder.Append(Environment.NewLine);
    requestBuilderConstructorParametersStringBuilder.Append("            ");
     
    if (optional)
    {
        if (param.Type.IsTypeNullable())
        {
             requestBuilderConstructorParametersStringBuilder.AppendFormat("{0} {1} = null,", paramTypeString, paramLowerFirstChar);
        }
        else
        {
             requestBuilderConstructorParametersStringBuilder.AppendFormat("{0}? {1} = null,", paramTypeString, paramLowerFirstChar);
        }
    }
    else
    {
        requestBuilderConstructorParametersStringBuilder.AppendFormat("{0} {1},", paramTypeString, paramLowerFirstChar);
    }
}

// Adds the specified parameter to the string builder for the initializations in the request builder constructor body
private void AddParameterToRequestBuilderInitializerStringBuilder(
    StringBuilder requestBuilderInitializerStringBuilder,
    OdcmParameter param)
{
    var paramCheckedCase = param.Name.ToCheckedCase();
    var paramLowerFirstChar = param.Name.ToLowerFirstChar();

    requestBuilderInitializerStringBuilder.Append(Environment.NewLine);
    requestBuilderInitializerStringBuilder.Append("            ");
    requestBuilderInitializerStringBuilder.AppendFormat("this.{0} = {1};", paramCheckedCase, paramLowerFirstChar);
}

// Adds the specified parameter to the string builder for calling the request constructor in the Request() method
private void AddParameterToRequestConstructorStringBuilder(
    StringBuilder requestConstructorParametersStringBuilder,
    OdcmParameter param)
{
    var paramCheckedCase = param.Name.ToCheckedCase();
    
    requestConstructorParametersStringBuilder.Append(Environment.NewLine);
    requestConstructorParametersStringBuilder.Append("                ");
    requestConstructorParametersStringBuilder.AppendFormat("this.{0},", paramCheckedCase);
}

// Adds the specified parameter to the string builder the request URL builder in the Request() method
private void AddParameterToRequestUrlInitializerStringBuilder(
    StringBuilder requestUrlInitializerStringBuilder,
    OdcmParameter param,
    bool optional)
{
    var paramCheckedCase = param.Name.ToCheckedCase();
    var paramLowerFirstChar = param.Name.ToLowerFirstChar();
    
    requestUrlInitializerStringBuilder.Append(Environment.NewLine);
    requestUrlInitializerStringBuilder.Append(Environment.NewLine);
    requestUrlInitializerStringBuilder.Append("            ");
    
    if (optional && !param.Type.IsTypeNullable())
    {
        requestUrlInitializerStringBuilder.AppendFormat("if (this.{0}.HasValue)", paramCheckedCase);
        requestUrlInitializerStringBuilder.Append(Environment.NewLine);
        requestUrlInitializerStringBuilder.Append("            {");
        requestUrlInitializerStringBuilder.Append(Environment.NewLine);
        requestUrlInitializerStringBuilder.AppendFormat(
            "                functionParametersStringBuilder.AppendFormat(\"{0}='{{0}}',\", this.{1}.Value);",
            paramLowerFirstChar,
            paramCheckedCase);
        requestUrlInitializerStringBuilder.Append(Environment.NewLine);
        requestUrlInitializerStringBuilder.Append("            }");
    }
    else
    {
        requestUrlInitializerStringBuilder.AppendFormat("if (this.{0} != null)", paramCheckedCase);
        requestUrlInitializerStringBuilder.Append(Environment.NewLine);
        requestUrlInitializerStringBuilder.Append("            {");
        requestUrlInitializerStringBuilder.Append(Environment.NewLine);
        requestUrlInitializerStringBuilder.AppendFormat(
            "                functionParametersStringBuilder.AppendFormat(\"{0}='{{0}}',\", this.{1});",
            paramLowerFirstChar,
            paramCheckedCase);
        requestUrlInitializerStringBuilder.Append(Environment.NewLine);
        requestUrlInitializerStringBuilder.Append("            }");
    }
}

#>
