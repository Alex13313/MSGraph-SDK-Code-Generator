<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="SharedCSharp.template.tt"#>
<#


var clientName = model.GetEntityContainer().ToCheckedCase() + "Client";
var clientNameLower = clientName.ToLowerFirstChar();

var method = host.CurrentType.AsOdcmMethod();
var entityName = method.Class.Name.ToCheckedCase();
var methodName = method.Name.Substring(method.Name.IndexOf('.') + 1).ToCheckedCase();
var requestType = entityName + methodName + "Request";

var returnEntityType = method.ReturnType.Name.ToCheckedCase();
var returnTypeObject = method.ReturnType.AsOdcmClass();
bool isAsync = method.LongDescriptionContains("async");
var isSpecialCollection = method.LongDescriptionContains("specialCollection");
var isCollection = method.IsCollection || isSpecialCollection;

var returnType = isAsync
    ? isCollection
	    ? "IAsyncMonitor<I" + entityName + methodName + "CollectionPage>"
	    : "IAsyncMonitor<" + entityName + ">"
    : isCollection
        ? "I" + entityName + methodName + "CollectionPage"
        : returnEntityType;
        
bool hasParameters = method.Parameters != null && method.Parameters.Any();
#>

namespace Microsoft.OneDrive.Sdk
{
    using System.Collections.Generic;
    using System.Threading.Tasks;

    /// <summary>
    /// The type <#=requestType#>.
    /// </summary>
    public partial class <#=requestType#> : AsyncMonitor, I<#=requestType#>AsyncMonitor
    {
    <#
    var returnString = !isAsync && isCollection ? "async Task<" + returnType + ">" : isAsync ? "async Task<" + returnType + ">" : "Task<" + returnType + ">";
    #>

        /// <summary>
        /// Issues the <#=httpMethod#> request.
        /// </summary>
        public <#=returnString#> <#=httpMethod.ToLower().ToCheckedCase()#>Async()
        {
			var response = await this.SendAsync<<#=entityName#><#=methodName#>CollectionResponse>(<#=methodParameter#>);
				if (response != null && response.Value != null && response.Value.CurrentPage != null)
				{
					if (response.AdditionalData != null)
					{
						response.Value.AdditionalData = response.AdditionalData;
						
						object nextPageLink;
						response.AdditionalData.TryGetValue("@odata.nextLink", out nextPageLink);

						var nextPageLinkString = nextPageLink as string;

						if (!string.IsNullOrEmpty(nextPageLinkString))
						{
							response.Value.InitializeNextPageRequest(
								this.OneDriveClient,
								nextPageLinkString);
						}
					}
				<#
				if (isSpecialCollection)
				{
					foreach (var property in returnTypeObject.Properties)
					{
						if (!property.LongDescriptionContains("ignorableCollection"))
						{
							var propertyName = property.Name.Substring(property.Name.IndexOf('.') + 1).ToCheckedCase();
				#>

					response.Value.<#=propertyName#> = response.<#=propertyName#>;
				<#
						}
					}
				}
				#>

					return response.Value;
				}

            return null;
		
    <#
    bool includeRequestBody = hasParameters && method.IsAction();
    var methodParameter = "null";
    if (includeRequestBody)
    {
        methodParameter = "this.RequestBody";
    }

	#>
		    using (var response = await this.SendRequestAsync(<#=methodParameter#>))
			{
			    return new AsyncMonitor<Item>(this.OneDriveClient, response.Headers["Location"]);
			}

        }
    }
}
