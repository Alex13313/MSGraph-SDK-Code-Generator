<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="Request.Base.template.tt"#>
<#+

// -------------------------------------------------------------
// Common methods for entity requests
// -------------------------------------------------------------

public string GetDeleteAsyncMethod(string deleteTargetString, string deleteTargetType)
{
    var stringBuilder = new StringBuilder();

    stringBuilder.Append("/// <summary>");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        /// Deletes the specified {0}.", deleteTargetString);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append("        /// </summary>");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append("        /// <returns>The task to await.</returns>");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append("        public async Task DeleteAsync()");
    stringBuilder.Append(@"
        {
            this.Method = ""DELETE"";");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("            await this.SendAsync<{0}>(null);", deleteTargetType);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append("        }");
    
    return stringBuilder.ToString();
}

// -------------------------------------------------------------
// Methods for standard entity requests
// -------------------------------------------------------------
public string GetEntityRequestClassDefinition(OdcmClass odcmClass)
{
    return this.GetClassDefinition(this.GetEntityRequestName(odcmClass));
}

public string GetEntityRequestConstructor(OdcmClass odcmClass)
{
    return this.GetConstructor(this.GetEntityRequestName(odcmClass));
}

public string GetEntityCreateAsyncMethod(OdcmClass odcmClass)
{
    var stringBuilder = new StringBuilder();
    
    var templateWriterHost   = (CustomT4Host)Host;
    var templateWriter = (CodeWriterCSharp)templateWriterHost.CodeWriter;
    var entityName = this.GetEntityNameString(odcmClass);
    var lowerCaseEntityName = entityName.ToLowerFirstChar();
    
    stringBuilder.Append("/// <summary>");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        /// Creates the specified {0} using PUT.", entityName);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append("        /// </summary>");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        /// <param name=\"{0}ToCreate\">The {1} to create.</param>", lowerCaseEntityName, entityName);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        /// <returns>The created {0}.</returns>", entityName);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        public async Task<{0}> CreateAsync({0} {1}ToCreate)", entityName, lowerCaseEntityName);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append("        {");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("            this.ContentType = \"{0}\";", templateWriter.jsonContentType);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append("            this.Method = \"PUT\";");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("            var newEntity = await this.SendAsync<{0}>({1}ToCreate);", entityName, lowerCaseEntityName);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append(
@"            this.InitializeCollectionProperties(newEntity);
            return newEntity;
        }");
    
    return stringBuilder.ToString();
}

public string GetEntityDeleteAsyncMethod(OdcmClass odcmClass)
{
    var entityName = this.GetEntityNameString(odcmClass);
    return this.GetDeleteAsyncMethod(entityName, entityName);
}

public string GetEntityGetAsyncMethod(OdcmClass odcmClass)
{
    var stringBuilder = new StringBuilder();
    
    var entityName = this.GetEntityNameString(odcmClass);
    
    stringBuilder.Append("/// <summary>");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        /// Gets the specified {0}.", entityName);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append("        /// </summary>");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        /// <returns>The {0}.</returns>", entityName);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        public async Task<{0}> GetAsync()", entityName);
    stringBuilder.Append(@"
        {
            this.Method = ""GET"";");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("            var retrievedEntity = await this.SendAsync<{0}>(null);", entityName);
    stringBuilder.Append(@"
            this.InitializeCollectionProperties(retrievedEntity);
            return retrievedEntity;
        }");
    
    return stringBuilder.ToString();
}

public string GetEntityUpdateAsyncMethod(OdcmClass odcmClass)
{
    var stringBuilder = new StringBuilder();
    
    var entityName = this.GetEntityNameString(odcmClass);
    var lowerCaseEntityName = entityName.ToLowerFirstChar();
    
    var templateWriterHost   = (CustomT4Host)Host;
    var templateWriter = (CodeWriterCSharp)templateWriterHost.CodeWriter;
    
    stringBuilder.Append("/// <summary>");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        /// Updates the specified {0} using PATCH.", entityName);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append("        /// </summary>");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        /// <param name=\"{0}ToUpdate\">The {1} to update.</param>", lowerCaseEntityName, entityName);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        /// <returns>The updated {0}.</returns>", entityName);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        public async Task<{0}> UpdateAsync({0} {1}ToUpdate)", entityName, lowerCaseEntityName);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append("        {");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("            this.ContentType = \"{0}\";", templateWriter.jsonContentType);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append("            this.Method = \"PATCH\";");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("            var updatedEntity = await this.SendAsync<{0}>({1}ToUpdate);", entityName, lowerCaseEntityName);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append(
@"            this.InitializeCollectionProperties(updatedEntity);
            return updatedEntity;
        }");
    
    return stringBuilder.ToString();
}

public string GetEntityExpandMethod(OdcmClass odcmClass)
{
    var stringBuilder = new StringBuilder();
    
    var entityRequest = this.GetRequestString(this.GetEntityNameString(odcmClass));
    
    stringBuilder.Append(
      @"/// <summary>
        /// Adds the specified expand value to the request.
        /// </summary>
        /// <param name=""value"">The expand value.</param>
        /// <returns>The request object to send.</returns>");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        public I{0} Expand(string value)", entityRequest);
        stringBuilder.Append(@"
        {
            this.QueryOptions.Add(new QueryOption(""$expand"", value));
            return this;
        }");
    
    return stringBuilder.ToString();
}

public string GetEntitySelectMethod(OdcmClass odcmClass)
{
    var stringBuilder = new StringBuilder();
    
    var entityRequest = this.GetRequestString(this.GetEntityNameString(odcmClass));
    
    stringBuilder.Append(
      @"/// <summary>
        /// Adds the specified select value to the request.
        /// </summary>
        /// <param name=""value"">The select value.</param>
        /// <returns>The request object to send.</returns>");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        public I{0} Select(string value)", entityRequest);
    stringBuilder.Append(@"
        {
            this.QueryOptions.Add(new QueryOption(""$select"", value));
            return this;
        }");
    
    return stringBuilder.ToString();
}

public string GetEntityTopMethod(OdcmClass odcmClass)
{
    var stringBuilder = new StringBuilder();
    
    var entityRequest = this.GetRequestString(this.GetEntityNameString(odcmClass));
    
    stringBuilder.Append(
      @"/// <summary>
        /// Adds the specified top value to the request.
        /// </summary>
        /// <param name=""value"">The top value.</param>
        /// <returns>The request object to send.</returns>");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        public I{0} Top(int value)", entityRequest);
        stringBuilder.Append(@"
        {
            this.QueryOptions.Add(new QueryOption(""$top"", value.ToString()));
            return this;
        }");
    
    return stringBuilder.ToString();
}

// -------------------------------------------------------------
// Methods for entity reference requests
// -------------------------------------------------------------
public string GetEntityReferenceRequestClassDefinition(OdcmClass odcmClass)
{
    return this.GetClassDefinition(this.GetEntityReferenceRequestName(odcmClass));
}

public string GetEntityReferenceRequestConstructor(OdcmClass odcmClass)
{
    return this.GetConstructor(this.GetEntityReferenceRequestName(odcmClass));
}

public string GetEntityReferenceDeleteAsyncMethod(OdcmClass odcmClass)
{
    var entityName = this.GetEntityNameString(odcmClass);
    return this.GetDeleteAsyncMethod(string.Concat(entityName, " reference"), entityName);
}

#>
