<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="Request.Base.template.tt"#>


<#+

// using System.Linq.Enumerable;

// -------------------------------------------------------------
// Methods for standard entity collection classes
// -------------------------------------------------------------
public string GetCollectionClassDefinition(OdcmProperty odcmProperty)
{
    return this.GetClassDefinition(this.GetPropertyCollectionRequestName(odcmProperty));
}

public string GetCollectionRequestConstructor(OdcmProperty odcmProperty)
{
    return this.GetConstructor(this.GetPropertyCollectionRequestName(odcmProperty));
}


// -------------------------------------------------------------
// Methods for the reference of an entity collection
// -------------------------------------------------------------
public string GetCollectionReferencesClassDefinition(OdcmProperty odcmProperty)
{
    return this.GetClassDefinition(this.GetPropertyCollectionReferencesRequestName(odcmProperty));
}

public string GetCollectionReferencesRequestConstructor(OdcmProperty odcmProperty)
{
    return this.GetConstructor(this.GetPropertyCollectionReferencesRequestName(odcmProperty));
}


// -------------------------------------------------------------
// Methods for entity collection classes that support $ref addressing
// -------------------------------------------------------------
public string GetCollectionWithReferencesClassDefinition(OdcmProperty odcmProperty)
{
    return this.GetClassDefinition(this.GetPropertyCollectionWithReferencesRequestName(odcmProperty));
}

public string GetCollectionWithReferencesRequestConstructor(OdcmProperty odcmProperty)
{
    return this.GetConstructor(this.GetPropertyCollectionWithReferencesRequestName(odcmProperty));
}


// -------------------------------------------------------------
// Build CRUD methods
// -------------------------------------------------------------

public void AppendMethodHeaderToPostAsyncMethod(string propertyType, string sanitizedPropertyName, StringBuilder stringBuilder, bool includeSendParameters)
{
    stringBuilder.Append("        /// <summary>");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        /// Adds the specified {0} to the collection via POST.", propertyType);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append("        /// </summary>");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        /// <param name=\"{0}\">The {1} to add.</param>", sanitizedPropertyName, propertyType);

    if (includeSendParameters)
    {
        stringBuilder.Append(Environment.NewLine);
        stringBuilder.Append("        /// <param name=\"cancellationToken\">The <see cref=\"CancellationToken\"/> for the request.</param>");
    }
}

public string GetPostAsyncMethod(OdcmProperty odcmProperty, string requestBody = null)
{
    if (!odcmProperty.LongDescriptionContains("readonly"))
    {
        var sanitizedPropertyName = odcmProperty.Projection.Type.Name.GetSanitizedPropertyName(odcmProperty.Name);
        var propertyType = this.GetPropertyTypeName(odcmProperty);

		if (propertyType.EndsWith("Request"))
		{
			propertyType = String.Concat(propertyType, "Object");
		}

        var templateWriterHost = (CustomT4Host)Host;
        var templateWriter = (CodeWriterCSharp)templateWriterHost.CodeWriter;

        var stringBuilder = new StringBuilder();

        stringBuilder.Append(Environment.NewLine);
        this.AppendMethodHeaderToPostAsyncMethod(propertyType, sanitizedPropertyName, stringBuilder, false);
        stringBuilder.Append(Environment.NewLine);
        stringBuilder.AppendFormat("        /// <returns>The created {0}.</returns>", propertyType);
        stringBuilder.Append(Environment.NewLine);
        stringBuilder.AppendFormat("        public System.Threading.Tasks.Task<{0}> AddAsync({0} {1})", propertyType, sanitizedPropertyName);
        stringBuilder.Append(Environment.NewLine);
        stringBuilder.Append("        {");
        stringBuilder.Append(Environment.NewLine);
        stringBuilder.AppendFormat("            return this.AddAsync({0}, CancellationToken.None);", sanitizedPropertyName);
        stringBuilder.Append(Environment.NewLine);
        stringBuilder.Append("        }");

        stringBuilder.Append(Environment.NewLine);
        stringBuilder.Append(Environment.NewLine);

        this.AppendMethodHeaderToPostAsyncMethod(propertyType, sanitizedPropertyName, stringBuilder, true);
        stringBuilder.Append(Environment.NewLine);
        stringBuilder.AppendFormat("        /// <returns>The created {0}.</returns>", propertyType);
        stringBuilder.Append(Environment.NewLine);
        stringBuilder.AppendFormat("        public System.Threading.Tasks.Task<{0}> AddAsync({0} {1}, CancellationToken cancellationToken)", propertyType, sanitizedPropertyName);
        stringBuilder.Append(Environment.NewLine);
        stringBuilder.Append("        {");
        stringBuilder.Append(Environment.NewLine);
        stringBuilder.AppendFormat("            this.ContentType = \"{0}\";", templateWriter.jsonContentType);
        stringBuilder.Append(Environment.NewLine);
        stringBuilder.Append("            this.Method = \"POST\";");

        var entity = odcmProperty.Projection.Type.AsOdcmClass();

        if (entity != null && entity.IsAbstract)
        {
            stringBuilder.Append(Environment.NewLine);
            stringBuilder.AppendFormat("            {0}.ODataType = string.Concat(\"#\", StringHelper.ConvertTypeToLowerCamelCase({0}.GetType().FullName));", sanitizedPropertyName);
        }

        stringBuilder.Append(Environment.NewLine);
        stringBuilder.AppendFormat("            return this.SendAsync<{0}>({1}, cancellationToken);", propertyType, sanitizedPropertyName);
        stringBuilder.Append(Environment.NewLine);
        stringBuilder.Append("        }");
        stringBuilder.Append(Environment.NewLine);

        return stringBuilder.ToString();
    }

    return string.Empty;
}

public string GetImplicitNavigationPropertyUrlSegment(OdcmSingleton singleton, OdcmProperty odcmProperty)
{
		/****
		To help the future dev in figuring this out, put a break point on the next executable line
		with the condition odcmProperty.Name == "teachers". The CSDL in and entities mentioned in these 
		comments are an example of the use of this scenario. 
		****/

        // (1) Check that there are NavigationPropertyBindings. If there aren't any, then we know this segment is 
		// the canonical path to the reference.
        if (singleton.NavigationPropertyBindings.Count == 0)
        {
			return "/" + odcmProperty.Name;
        }

        // (2) Get all of the keys that contain our target path name. The keys come from the Path attribute on a 
		// NavigationPropertyBinding. So if our target property (OdcmProperty.Name) is named 'teachers', then we need to only consider
		// NavigationPropertyBinding paths that end with 'teachers'. The NavigationPropertyBindings are found in the Singleton that 
		// defines the EntitySet that contains this property. The NavigationPropertyBindings provide generation hints for how to 
		// reference non-contained entities that are defined within the same Singleton (this statement is conjecture). This generation
		// hints is used to specify a reference URL for $ref call. 
		// Example: in this case, "teachers". This should be the end part of the BindingPath.

        IEnumerable<string> keys = singleton.NavigationPropertyBindings.Where(kvp => kvp.Key.EndsWith(odcmProperty.Name)).Select(kvp => kvp.Key);

		string bindingTarget;

        // The first assumption is that CSDL is added with a convention where the last path segment in NavigationPropertyBinding.Path
        // is named consistently in a singleton so it doesn't matter what the preceding segments are. 
        // The second assumption is that if the last path is named consistently, the target will be consistent as well.
        // These may turn out to be a weak assumption. We use this assumption since we can't determine a unique path
        // for three or more segments since *RequestBuilder and *Request objects are generated per entity+navigation,
        // and not [entity+navigation]*n --> across multiple navigations.
		if (keys.Count() > 0 && singleton.NavigationPropertyBindings.TryGetValue(keys.First(), out bindingTarget))
		{
			// We found the target
			return "/" + bindingTarget;
		}
		else
			 return "/" + odcmProperty.Name;
}

public string GetPostAsyncMethodForReferencesRequest(OdcmProperty odcmProperty)
{
    var sanitizedPropertyName = odcmProperty.Projection.Type.Name.GetSanitizedPropertyName(odcmProperty.Name);
    var propertyType = this.GetPropertyTypeName(odcmProperty);

    var templateWriterHost = (CustomT4Host)Host;
    var templateWriter = (CodeWriterCSharp)templateWriterHost.CodeWriter;

    var serviceNavigationProperty = odcmProperty.GetServiceCollectionNavigationPropertyForPropertyType();
	if (serviceNavigationProperty == null)
		return string.Empty;
	
	var implicitNavigationProperty = string.Empty;
	
	// If the odcmProperty is a part of Singleton, then we need to determine whether there is a  
	// NavigationPropertyBinding generation hint. If there is, then we need to use it for 
	// creating the URL of a reference entity in a POST body. 
	if (serviceNavigationProperty.GetType() == typeof(OdcmSingleton)) 
	{
		var singleton = (OdcmSingleton)serviceNavigationProperty;

        implicitNavigationProperty = GetImplicitNavigationPropertyUrlSegment(singleton, odcmProperty);
	}

    var stringBuilder = new StringBuilder();

    stringBuilder.Append(Environment.NewLine);
    this.AppendMethodHeaderToPostAsyncMethod(propertyType, sanitizedPropertyName, stringBuilder, false);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        /// <returns>The task to await.</returns>", propertyType);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        public System.Threading.Tasks.Task AddAsync({0} {1})", propertyType, sanitizedPropertyName);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append("        {");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("            return this.AddAsync({0}, CancellationToken.None);", sanitizedPropertyName);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append("        }");

    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append(Environment.NewLine);

    this.AppendMethodHeaderToPostAsyncMethod(propertyType, sanitizedPropertyName, stringBuilder, true);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        /// <returns>The task to await.</returns>", propertyType);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        public System.Threading.Tasks.Task AddAsync({0} {1}, CancellationToken cancellationToken)", propertyType, sanitizedPropertyName);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append("        {");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("            this.ContentType = \"{0}\";", templateWriter.jsonContentType);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append("            this.Method = \"POST\";");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("            if (string.IsNullOrEmpty({0}.Id))", sanitizedPropertyName);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append("            {");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append("                throw new ServiceException(new Error { Code = \"invalidRequest\", Message = \"ID is required to add a reference.\" });");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append("            }");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("            var requestBody = new ReferenceRequestBody {{ ODataId = string.Format(\"{{0}}/{0}{1}/{{1}}\", this.Client.BaseUrl, {2}.Id) }};", serviceNavigationProperty.Name, implicitNavigationProperty, sanitizedPropertyName);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("            return this.SendAsync(requestBody, cancellationToken);");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append("        }");
    stringBuilder.Append(Environment.NewLine);

    return stringBuilder.ToString();
}

#>
