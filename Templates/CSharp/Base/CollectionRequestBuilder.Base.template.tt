<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="RequestBuilder.Base.template.tt"#>
<#+

// -------------------------------------------------------------
// Methods for standard entity collection classes
// -------------------------------------------------------------
public string GetCollectionClassDefinition(OdcmProperty odcmProperty)
{
    return this.GetClassDefinition(this.GetPropertyCollectionRequestBuilderName(odcmProperty));
}

public string GetCollectionRequestBuilderConstructor(OdcmProperty odcmProperty)
{
    return this.GetConstructor(this.GetPropertyCollectionRequestBuilderName(odcmProperty));
}

public string GetCollectionRequestMethod(OdcmProperty odcmProperty)
{
    return this.GetRequestMethod(this.GetPropertyCollectionRequestName(odcmProperty));
}

public string GetCollectionRequestMethodWithOptions(OdcmProperty odcmProperty)
{
    return this.GetRequestMethodWithOptions(this.GetPropertyCollectionRequestName(odcmProperty));
}

// Creates the indexer property definition for the collection
public string GetCollectionIndexRequestBuilder(OdcmProperty odcmProperty)
{
    var stringBuilder = new StringBuilder();
    var propTypeName = this.GetPropertyTypeName(odcmProperty);
    var entityRequestBuilder = this.GetPropertyTypeRequestBuilderName(odcmProperty);
        
    stringBuilder.Append("/// <summary>");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        /// Gets an <see cref=\"I{0}\"/> for the specified {1}.", entityRequestBuilder, propTypeName);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append("        /// </summary>");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        /// <param name=\"id\">The ID for the {0}.</param>", propTypeName);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        /// <returns>The <see cref=\"I{0}\"/>.</returns>", entityRequestBuilder);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        public I{0} this[string id]", entityRequestBuilder);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append(
@"        {
            get
            {
");
        
    stringBuilder.AppendFormat("                return new {0}(this.AppendSegmentToRequestUrl(id), this.Client);", entityRequestBuilder);
    stringBuilder.Append(@"
            }
        }");
        
    return stringBuilder.ToString();
}


// -------------------------------------------------------------
// Methods for the reference of an entity collection
// -------------------------------------------------------------
public string GetCollectionReferenceClassDefinition(OdcmProperty odcmProperty)
{
    return this.GetClassDefinition(this.GetPropertyCollectionReferenceRequestBuilderName(odcmProperty));
}

public string GetCollectionReferenceRequestBuilderConstructor(OdcmProperty odcmProperty)
{
    return this.GetConstructor(this.GetPropertyCollectionReferenceRequestBuilderName(odcmProperty));
}

public string GetCollectionReferenceRequestMethod(OdcmProperty odcmProperty)
{
    return this.GetRequestMethod(this.GetPropertyCollectionReferenceRequestName(odcmProperty));
}

public string GetCollectionReferenceRequestMethodWithOptions(OdcmProperty odcmProperty)
{
    return this.GetRequestMethodWithOptions(this.GetPropertyCollectionReferenceRequestName(odcmProperty));
}


// -------------------------------------------------------------
// Methods for entity collection classes that support $ref addressing
// -------------------------------------------------------------
public string GetCollectionWithReferencesClassDefinition(OdcmProperty odcmProperty)
{
    return this.GetClassDefinition(this.GetPropertyCollectionWithReferencesRequestBuilderName(odcmProperty));
}

public string GetCollectionWithReferencesRequestBuilderConstructor(OdcmProperty odcmProperty)
{
    return this.GetConstructor(this.GetPropertyCollectionWithReferencesRequestBuilderName(odcmProperty));
}

public string GetCollectionWithReferencesRequestMethod(OdcmProperty odcmProperty)
{
    return this.GetRequestMethod(this.GetPropertyCollectionWithReferencesRequestName(odcmProperty));
}

public string GetCollectionWithReferencesRequestMethodWithOptions(OdcmProperty odcmProperty)
{
    return this.GetRequestMethodWithOptions(this.GetPropertyCollectionWithReferencesRequestName(odcmProperty));
}

// Creates the request builder property definition for the $ref navigation on the collection
public string GetCollectionReferenceRequestBuilder(OdcmProperty odcmProperty)
{
    var propertyClass = odcmProperty.Class.AsOdcmClass();
    if (propertyClass.Kind != OdcmClassKind.Service && odcmProperty.IsNavigation() && !odcmProperty.ContainsTarget)
    {
        var stringBuilder = new StringBuilder();
        var entityReferenceRequestBuilder = this.GetPropertyReferenceTypeRequestBuilderName(odcmProperty);
        
        stringBuilder.Append(Environment.NewLine);
        stringBuilder.Append("        /// <summary>");
        stringBuilder.Append(Environment.NewLine);
        stringBuilder.AppendFormat("        /// Gets an <see cref=\"I{0}\"/> for the references in the collection.", entityReferenceRequestBuilder);
        stringBuilder.Append(Environment.NewLine);
        stringBuilder.Append("        /// </summary>");
        stringBuilder.Append(Environment.NewLine);
        stringBuilder.AppendFormat("        /// <returns>The <see cref=\"I{0}\"/>.</returns>", entityReferenceRequestBuilder);
        stringBuilder.Append(Environment.NewLine);
        stringBuilder.AppendFormat("        I{0} {0}", entityReferenceRequestBuilder);
        stringBuilder.Append(Environment.NewLine);
        stringBuilder.Append(
@"        {
            get
            {
");

        stringBuilder.AppendFormat("                return new {0}(this.AppendSegmentToRequestUrl(\"$ref\"), this.Client);", entityReferenceRequestBuilder);
        stringBuilder.Append(@"
            }
        }
");

        return stringBuilder.ToString();
    }
    
    return string.Empty;
}

// Creates the indexer property definition for a collection that supports $ref
public string GetCollectionWithReferencesIndexRequestBuilder(OdcmProperty odcmProperty)
{
    var stringBuilder = new StringBuilder();
    var propTypeName = this.GetPropertyTypeName(odcmProperty);
    var entityRequestBuilder = this.GetPropertyTypeWithReferencesRequestBuilderName(odcmProperty);
    
    stringBuilder.Append("/// <summary>");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        /// Gets an <see cref=\"I{0}\"/> for the specified {1}.", entityRequestBuilder, propTypeName);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append("        /// </summary>");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        /// <param name=\"id\">The ID for the {0}.</param>", propTypeName);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        /// <returns>The <see cref=\"I{0}\"/>.</returns>", entityRequestBuilder);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        I{0} this[string id] {{ get; }}", entityRequestBuilder);
    
    return stringBuilder.ToString();
}

#>
