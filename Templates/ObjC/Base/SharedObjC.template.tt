<#@ template debug="true" hostspecific="true" language="C#" #>
<#
host                = (CustomT4Host)Host;
model               = host.CurrentModel;
writer              = (CodeWriterObjC)host.CodeWriter;
prefix              = writer.GetPrefix();
#>
<#=writer.WriteHeader()#>
<#+

private String prefix;
private CodeWriterObjC writer;
private CustomT4Host host;
private OdcmModel model;

private string GetObjCTypeIdentifier(OdcmObject o, bool getUnderlyingType=false)
{
    if(o is OdcmProperty)
    {
        OdcmProperty prop=(OdcmProperty)o;
        if(prop.IsCollection && !getUnderlyingType)
        {
            return GetStaticCollectionObject();
        }

        return GetObjCTypeIdentifier(prop.Type,getUnderlyingType);
    }
    else if(o is OdcmType)
    {
        return ((OdcmType)o).GetTypeString();
    }

    return string.Empty;
}

private string GetObjCTypeForVarDeclaration(OdcmObject o, bool getUnderlyingType=false)
{
    if(o is OdcmProperty)
    {
        OdcmProperty prop=(OdcmProperty)o;
        if(prop.IsCollection || prop.IsComplex())
        {
            return GetObjCTypeIdentifier(prop,getUnderlyingType) + "*";
        }
    }
    else if(o is OdcmType)
    {
        OdcmType type=(OdcmType)o;
        if(type.IsComplex())
        {
            return GetObjCTypeIdentifier(type,getUnderlyingType) + "*";
        }
    }

    return GetObjCTypeIdentifier(o,getUnderlyingType);
}

private string GetObjCEnumMember(OdcmEnum en, OdcmEnumMember em)
{
    return GetObjCTypeIdentifier(en) + em.Name.ToUpperFirstChar();
}

private string GetObjCProperty(OdcmProperty prop)
{
    return prop.SanitizePropertyName().ToLowerFirstChar();
}

private string GetObjCPropertyGetter(OdcmProperty prop)
{
    return writer.GetGetterString(GetObjCProperty(prop));
}

private string GetObjCPropertySetter(OdcmProperty prop)
{
    return "set" + GetObjCProperty(prop).ToUpperFirstChar();
}

private bool IsNSJSONSerializable(OdcmType type)
{
    string ts=GetObjCTypeIdentifier(type);
    return ts=="NSString" || ts=="NSNumber" || ts=="NSArray" || ts=="NSDictionary" || ts=="NSNull";
}


private string GetHydratedPropertyFromDictionary(OdcmProperty prop)
{
    if(GetObjCTypeIdentifier(prop,true)=="NSDate")
    {
        return String.Format(@"[NSDate ms_dateFromString: self.dictionary[@""{0}""]]",prop.Name);
    }

    if(prop.IsEnum())
    {
        return String.Format(
        @"[self.dictionary[@""{0}""] to{1}]",
        prop.Name,
        GetObjCTypeIdentifier(prop,true)
        );
    }

    //Complex catch-all
    if(prop.IsComplex())
    {
        return String.Format(
        @"[[{0} alloc] initWithDictionary: self.dictionary[@""{1}""] ]",
        GetObjCTypeIdentifier(prop,true),
        prop.Name
        );
    }

    return String.Format(
    @"[self.dictionary[@""{1}""] {0}]",
    prop.Type.GetNSNumberValueMethod(),
    prop.Name
    );
}

private string GetHydratedPropertyFromDictionaryAsObjectPointer(OdcmProperty prop)
{
    if(prop.IsComplex()) return GetHydratedPropertyFromDictionary(prop);
    return "@(" + GetHydratedPropertyFromDictionary(prop) + ")";
}


private string GetHydratedIVarFromDictionary(OdcmProperty prop)
{
    if(prop.IsCollection)
    {
        return String.Format(@"
    NSMutableArray *{0}Collection = [NSMutableArray array];
    NSArray *{0}s = self.dictionary[@""{1}""];

    if ([{0}s isKindOfClass:[NSArray class]]){{
        for (NSDictionary *{0} in {0}s){{
            [{0}Collection addObject:{2}];
         }}
    }}

    if ([{0}Collection count] > 0){{
        _{0} = [[{3} alloc] initWithArray:{0}Collection nextLink:self.dictionary[@""@nextLink""] additionalData:self.dictionary];
    }}
        ",
        GetObjCProperty(prop),
        prop.Name,
        GetHydratedPropertyFromDictionaryAsObjectPointer(prop),
        GetStaticCollectionObject());
    }

    return String.Format(@"_{0} = {1};",GetObjCProperty(prop),GetHydratedPropertyFromDictionary(prop));

}

private string SetDictionaryPropertySerialized(OdcmProperty prop, string val)
{
    if(prop.IsComplex())
    {
        return  "self.dictionary[@\"" + prop.Name + "\"] = " + val + ";";
    }

    return  "self.dictionary[@\"" + prop.Name + "\"] = @(" + val + ");";
}

/*
 * Methods to get strings from non-generated SDK objects
 */

private string GetStaticCollectionObject()
{
    return writer.GetStaticCodePrefix() +"Collection";
}

private string GetStaticBaseObject()
{
    return writer.GetStaticCodePrefix() + "Object";
}

private string GeneratePropertyDeclarationLine(OdcmProperty prop)
{
    return "@property (nonatomic, setter=" + GetObjCPropertySetter(prop) + ":, getter=" + GetObjCPropertyGetter(prop) + ") " + GetObjCTypeForVarDeclaration(prop) + " " + GetObjCProperty(prop) + ";";
}

private void PropertyGetterImplementation(OdcmProperty prop)
{
#>
- (<#=GetObjCTypeForVarDeclaration(prop)#>) <#=GetObjCPropertyGetter(prop)#>
{
<#+
    if(IsNSJSONSerializable(prop.Type))
    {
#>
    return self.dictionary[@"<#=prop.Name#>"];
<#+
    }
    else
    {
#>
<#+
        if(prop.IsComplex())
        {
#>
    if(!_<#=GetObjCProperty(prop)#>){
        <#=GetHydratedIVarFromDictionary(prop)#>
    }
<#+
        }
        else
        {
#>
    <#=GetHydratedIVarFromDictionary(prop)#>
<#+
        }
#>
    return _<#=GetObjCProperty(prop)#>;
<#+
    }
#>
}
<#+
}

private void PropertySetterImplementation(OdcmProperty prop)
{
#>
- (void) <#=GetObjCPropertySetter(prop)#>: (<#=GetObjCTypeForVarDeclaration(prop)#>) val
{
<#+
    if(IsNSJSONSerializable(prop.Type))
    {
#>
    self.dictionary[@"<#=prop.Name#>"] = val;
<#+
    }
    else
    {
#>
    _<#=GetObjCProperty(prop)#> = val;
    <#=SetDictionaryPropertySerialized(prop,"val")#>
<#+
    }
#>
}
<#+
}
#>
