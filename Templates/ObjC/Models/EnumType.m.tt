<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="SharedObjC.template.tt"#>
<#
var entity = host.CurrentType.AsOdcmEnum();
var typeName = GetObjCTypeIdentifier(entity);
var valueTypeName = typeName + "Value";
#>

#include <<#=typeName#>.h>

@interface <#=typeName#> () {
    <#=valueTypeName#> _enumValue;
}

@implementation <#=typeName#>

<#
/////////////////////////////////////////////////////////////////
// Generate the static methods that look like [DayOfWeek Monday]
/////////////////////////////////////////////////////////////////
foreach (var member in entity.Members.OrderBy(x => x.Value))
{
#>
+(<#=typeName#>*) <#=member.Name.ToUpperFirst()#> {
    static <#=typeName#> *_<#=member.Name.ToLowerFirst()#>
    static dispatch_once_t onceToken;
	dispatch_once(&onceToken, ^{
	    _<#=member.Name.ToLowerFirst()#> = [[<#=typeName#> alloc] init];
		_<#=member.Name.ToLowerFirst()#>._enumValue = <#=GetObjCEnumMember(entity, member)#>;
	});
	return _<#=member.Name.ToLowerFirst()#>;
}
<#
}
#>
<#
///////////////////////////////////////////////////////////////
// Generate conversion from enum to boxed type and vice versa
// e.g. [DayOfWeek dayOfWeekWithEnumValue:DayOfWeekMonday]
///////////////////////////////////////////////////////////////
#>
+(<#=GetObjCTypeIdentifier(entity)#>*) <#=GetObjCTypeIdentifier(entity).ToLowerFirst()#>WithEnumValue:(<#=valueType#>)val {
    
}

- (<#=valueTypeName#>) enumValue {
    return _enumValue;
}

@end

@implementation NSString (<#=typeName#>)

+ (instancetype) stringWith<#=typeName#>:(<#=typeName#>)val {

    switch(val.enumValue)
    {
<#
    foreach(var member in entity.Members)
    {
#>
        case <#=GetObjCEnumMember(entity,member)#>:
            return @"<#=member.Name#>";
<#
    }
#>
        case <#=typeName#>EndOfEnum:
        default:
            return nil;
    }

    return nil;
}

- (<#=typeName#>*) to<#=typeName#>{

    <#
    foreach(var member in entity.Members)
    {
    #>if([self isEqualToString:@"<#=member.Name#>"])
    {
          return [<#=typeName#> <#=GetObjCEnumMember(entity,member)#>];
    }
    else <#
    }
    #>{
        return <#=GetObjCTypeIdentifier(entity)#>EndOfEnum;
    }
}

@end
