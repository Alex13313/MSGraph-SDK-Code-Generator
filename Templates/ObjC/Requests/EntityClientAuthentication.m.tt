<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="SharedObjC.template.tt"#>
<#
var entityName = writer.GetPrefix()  + "Client";
#>

#import "<#=entityName#>+Authentication.h"
#import "<#=writer.GetStaticCodePrefix()#>AccountSession.h"
#import "<#=writer.GetStaticCodePrefix()#>ServiceInfo.h"
#import "<#=writer.GetStaticCodePrefix()#>AppConfiguration.h"

@implementation <#=entityName#> (Authentication)

+ (<#=entityName#> *)currentClientWithAppConfig:(<#=writer.GetStaticCodePrefix()#>AppConfiguration *)appConfig
{
    // There must be at least one App Id
    NSParameterAssert(appConfig.microsoftAccountAppId || appConfig.activeDirectoryAppId);
    
    <#=entityName#> *currentClient = nil;
    <#=writer.GetStaticCodePrefix()#>AccountSession *session = [<#=entityName#> currentSessionFromAccountStore:appConfig.accountStore];
    if (session){
        [appConfig.logger logWithLevel:<#=writer.GetStaticCodePrefix()#>LogLevelLogInfo message:@"Load %@ as current session", session.accountId];
        if (appConfig.authProvider){
            [appConfig.logger logWithLevel:<#=writer.GetStaticCodePrefix()#>LogLevelLogVerbose message:@"Loading client with %@ as auth provider", appConfig.authProvider];
            currentClient = [<#=entityName#> clientWithAuthProvider:appConfig.authProvider accountSession:session httpProvider:appConfig.httpProvider logger:appConfig.logger];
        }
        else {
            currentClient = [<#=entityName#> clientWithAccountSession:session httpProvider:appConfig.httpProvider accountStore:appConfig.accountStore logger:appConfig.logger];
        }
    }
    return currentClient;
}

+ (NSArray *)clientsFromAppConfig:(<#=writer.GetStaticCodePrefix()#>AppConfiguration *)appConfig
{
    // There must be at least one App Id
    NSParameterAssert(appConfig.microsoftAccountAppId || appConfig.activeDirectoryAppId);
    
    NSArray *clients = nil;
    if (appConfig.accountStore && appConfig.authProvider){
        clients = [<#=entityName#> clientsFromAccountStore:appConfig.accountStore withAuthProvider:appConfig.authProvider httpProvider:appConfig.httpProvider logger:appConfig.logger];
    }
    else if (appConfig.accountStore){
        clients = [<#=entityName#> clientsFromAccountStore:appConfig.accountStore httpProvider:appConfig.httpProvider logger:appConfig.logger];
    }
    return clients;
}

+ (NSArray *)clientsFromAccountStore:(id <<#=writer.GetStaticCodePrefix()#>AccountStore> )accountStore withAuthProvider:(id <<#=writer.GetStaticCodePrefix()#>AuthProvider>)authProvider httpProvider:(id <<#=writer.GetStaticCodePrefix()#>HttpProvider> )httpProvider logger:(id <<#=writer.GetStaticCodePrefix()#>Logger>)logger
{
    NSParameterAssert(accountStore);
    NSParameterAssert(authProvider);
    NSMutableArray *clients = [NSMutableArray array];
    [[accountStore loadAccounts] enumerateObjectsUsingBlock:^(<#=writer.GetStaticCodePrefix()#>AccountSession *session, NSUInteger index, BOOL *stop){
        [clients addObject:[<#=entityName#> clientWithAuthProvider:authProvider accountSession:session httpProvider:httpProvider logger:logger]];
    }];
    return clients;
}

+ (NSArray *)clientsFromAccountStore:(id <<#=writer.GetStaticCodePrefix()#>AccountStore> )accountStore httpProvider:(id <<#=writer.GetStaticCodePrefix()#>HttpProvider>)httpProvider logger:(id <<#=writer.GetStaticCodePrefix()#>Logger>)logger
{
    NSParameterAssert(accountStore);
    
    NSMutableArray *clients = [NSMutableArray array];
    [[accountStore loadAccounts] enumerateObjectsUsingBlock:^(<#=writer.GetStaticCodePrefix()#>AccountSession *session, NSUInteger index, BOOL *stop){
        [clients addObject:[<#=entityName#> clientWithAccountSession:session httpProvider:httpProvider accountStore:accountStore logger:logger]];
    }];
    return clients;
}

+ (<#=entityName#> *)clientWithAuthProvider:(id <<#=writer.GetStaticCodePrefix()#>AuthProvider>)authProvider
                      accountSession:(<#=writer.GetStaticCodePrefix()#>AccountSession *)accountSession
                        httpProvider:(id <<#=writer.GetStaticCodePrefix()#>HttpProvider>)httpProvider
                              logger:(id <<#=writer.GetStaticCodePrefix()#>Logger>)logger
{
    NSParameterAssert(authProvider);
    NSParameterAssert(accountSession);
    
    <#=entityName#> *client = [[<#=entityName#> alloc] init];
    client.logger = logger;
    if ([authProvider respondsToSelector:@selector(authenticateWithAccountSession:completion:)]){
        [authProvider authenticateWithAccountSession:accountSession completion:nil];
    }
    else {
        [logger logWithLevel:<#=writer.GetStaticCodePrefix()#>LogLevelLogWarn message:@"Auth provider doesn't respond to authenticateWithAccountSession:completion:"];
    }
    [client onAuthenticationCompletionWithError:nil authProvider:authProvider httpProvider:httpProvider completion:nil];
    return client;
}

+ (<#=entityName#> *)clientWithAccountSession:(<#=writer.GetStaticCodePrefix()#>AccountSession *)accountSession
                          httpProvider:(id <<#=writer.GetStaticCodePrefix()#>HttpProvider>)httpProvider
                          accountStore:(id <<#=writer.GetStaticCodePrefix()#>AccountStore>)accountStore
                                logger:(id <<#=writer.GetStaticCodePrefix()#>Logger >)logger
{
    NSParameterAssert(accountSession);
    NSParameterAssert(accountStore);
    
    id <<#=writer.GetStaticCodePrefix()#>AuthProvider> authProvider = [accountSession.serviceInfo authProviderWithURLSession:httpProvider
                                                                                 accountStore:accountStore
                                                                                       logger:logger];
    return [<#=entityName#> clientWithAuthProvider:authProvider accountSession:accountSession httpProvider:httpProvider logger:logger];
}

+ (<#=writer.GetStaticCodePrefix()#>AccountSession*)currentSessionFromAccountStore:(id <<#=writer.GetStaticCodePrefix()#>AccountStore>)accountStore
{
    <#=writer.GetStaticCodePrefix()#>AccountSession *session = nil;
    if (accountStore){
        session = [accountStore loadCurrentAccount];
    }
    return session;
}

+ (void)authenticatedClientWithAppConfig:(<#=writer.GetStaticCodePrefix()#>AppConfiguration *)appConfig completion:(void (^)(<#=entityName#> *client, NSError *error))completion
{
    <#=entityName#> *client = [[<#=entityName#> alloc] init];
    client.logger = appConfig.logger;
    [client authenticateWithAppConfig:appConfig completion:^(NSError *error){
        if (!error){
            completion(client, error);
        }
        else {
            completion(nil, error);
        }
    }];
}

- (void)authenticateWithAuthProvider:(id <<#=writer.GetStaticCodePrefix()#>AuthProvider> )authProvider
                        httpProvider:(id <<#=writer.GetStaticCodePrefix()#>HttpProvider> )httpProvider
                              logger:(id <<#=writer.GetStaticCodePrefix()#>Logger>)logger
                          completion:(void (^)(NSError *error))completion
{
    
    UIViewController *rootViewController = [[[[UIApplication sharedApplication] delegate] window] rootViewController];
    [self authenticateWithAuthProvider:authProvider
                            httpProvider:httpProvider
                                logger:logger
                        viewController:rootViewController
                            completion:completion];
}

- (void)authenticateWithAuthProvider:(id<<#=writer.GetStaticCodePrefix()#>AuthProvider>)authProvider
                        httpProvider:(id<<#=writer.GetStaticCodePrefix()#>HttpProvider>)httpProvider
                              logger:(id <<#=writer.GetStaticCodePrefix()#>Logger>)logger
                      viewController:(UIViewController *)viewController
                          completion:(void (^)(NSError *))completion
{
    NSParameterAssert(authProvider);
    NSParameterAssert(httpProvider);
    NSParameterAssert(viewController);
    if ([authProvider respondsToSelector:@selector(authenticateWithViewController:completion:)]){
        [authProvider authenticateWithViewController:viewController completion:^(NSError *error){
            [self onAuthenticationCompletionWithError:error authProvider:authProvider httpProvider:httpProvider completion:completion];
        }];
    }
    else{
        [logger logWithLevel:<#=writer.GetStaticCodePrefix()#>LogLevelLogWarn message:@"Auth provider doesn't respond to authenticateWithViewController"];
    }
}

- (void)authenticateWithAppConfig:(<#=writer.GetStaticCodePrefix()#>AppConfiguration *)appConfig
                      completion:(void (^)(NSError *error))completion
{
    NSParameterAssert(appConfig);
    
    __block UIViewController *rootViewController = appConfig.parentAuthController;
    if (appConfig.authProvider){
        [self authenticateWithAuthProvider:appConfig.authProvider
                              httpProvider:appConfig.httpProvider
                                    logger:appConfig.logger
                            viewController:rootViewController
                                completion:completion];
    }
    else {
        // We may not know which authentication service to use we have to discover it
        [appConfig.serviceInfoProvider getServiceInfoWithViewController:rootViewController
                                                       appConfiguration:appConfig
                                                             completion:^(UIViewController *presentedViewController, <#=writer.GetStaticCodePrefix()#>ServiceInfo *serviceInfo, NSError *error){
                                                                if (!error){
                                                                    id <<#=writer.GetStaticCodePrefix()#>AuthProvider> authProvider = [serviceInfo authProviderWithURLSession:appConfig.httpProvider
                                                                                                                                  accountStore:appConfig.accountStore
                                                                                                                                        logger:appConfig.logger];
                                                                    [self authenticateWithAuthProvider:authProvider
                                                                                          httpProvider:appConfig.httpProvider
                                                                                                logger:appConfig.logger
                                                                                        viewController:(presentedViewController.parentViewController) ? presentedViewController.parentViewController : rootViewController
                                                                                            completion:completion];
                                                                }
                                                                else {
                                                                    if (presentedViewController){
                                                                        [presentedViewController dismissViewControllerAnimated:YES completion:nil];
                                                                    }
                                                                    completion(error);
                                                                }
        }];
    }
}


- (void)onAuthenticationCompletionWithError:(NSError *)error
                               authProvider:(id <<#=writer.GetStaticCodePrefix()#>AuthProvider>)authProvider
                               httpProvider:(id <<#=writer.GetStaticCodePrefix()#>HttpProvider>)httpProvider
                                 completion:(void (^)(NSError *error))completion
{
    if (!error){
        self.baseURL = [NSURL URLWithString:authProvider.baseURL];
        self.authProvider = authProvider;
        self.httpProvider = httpProvider;
    }
    if (completion){
        completion(error);
    }
}

@end
