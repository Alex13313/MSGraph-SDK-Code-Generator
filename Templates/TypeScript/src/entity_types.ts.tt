<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension="\\" #>
<#
    CustomT4Host host           = (CustomT4Host) Host;
    CodeWriterTypeScript writer = (CodeWriterTypeScript) host.CodeWriter;

    var model                   = host.CurrentModel;
    var entityTypes             = model.GetEntityTypes();
    var enumTypes               = model.GetEnumTypes();
    var complexTypes            = model.GetComplexTypes();
#>
<#= writer.WriteHeader() #>
declare module MicrosoftGraph {
<#
  foreach(var entityType in entityTypes)
    {
        var methods = entityType.Methods;
#>

    export interface <#= writer.UpperCaseFirstChar(entityType.Name) #> <# if (entityType.Base != null) { #>extends <#=  writer.UpperCaseFirstChar(entityType.Base.Name) #><# }#> {
<#
            foreach(var prop in entityType.Properties.ToList()) {
#>
      <#=  prop.Name #>?: <#= writer.FullTypeName(prop) #>
<# } #>
    }
    <#
    }
#>

<#
  foreach(var enumType in enumTypes)
  {
#>
  export const enum <#= writer.UpperCaseFirstChar(enumType.Name) #> {
<#
      foreach(var member in enumType.Members)
      {
#>
    <#= member.Name #> = <#= member.Value #>,
<#
      }
      #>
  }

<#
  }
  foreach(var complexType in complexTypes)
  {
#>
  export interface <#= writer.UpperCaseFirstChar(complexType.Name)#> {
<#
    foreach(var prop in complexType.Properties)
    {
#>
      <#= prop.Name #>?: <#= writer.FullTypeName(prop) #>
<#
    }
#>
  }

<#
  }
#>
}