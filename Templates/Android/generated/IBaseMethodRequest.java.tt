<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="BaseModel.template.tt"#>
<#@ output extension="\\" #>
<#host.TemplateName = IBaseTypeRequest(c);#>
<#
var projection = c.Projection;
var canExpand = projection.SupportsExpand();
var canSelect = projection.BooleanValueOf("Selectable") != false;
var canUseTop = projection.BooleanValueOf("TopSupported") != false;
#>
<#=writer.WriteHeader()#>
<#=CreatePackageDef(host)#>

import com.google.gson.JsonObject;
import com.google.gson.annotations.*;

<#=CreateInterfaceDef(IBaseTypeRequest(c))#>

<# if (c.AsOdcmMethod().IsAction()) { #>
<#      if (c.AsOdcmMethod().ReturnType != null) { #>
    /**
     * Creates the <#=ClassTypeName(c)#>
     *
     * @param callback The callback to be called after success or failure.
     */
    void post(final ICallback<<#=ClassTypeName(c)#>> callback);

    /**
     * Creates the <#=ClassTypeName(c)#>
     *
     * @return The <#=ClassTypeName(c)#>
     * @throws ClientException An exception occurs if there was an error while the request was sent.
     */
    <#=ClassTypeName(c)#> post() throws ClientException;

<# if (canSelect) { #>
    /**
     * Sets the select clause for the request
     *
     * @param value The select clause
     * @return The updated request
     */
    <#=ITypeRequest(c)#> select(final String value);

<# } #>
<# if (canExpand) { #>
    /**
     * Sets the expand clause for the request
     *
     * @param value The expand clause
     * @return The updated request
     */
    <#=ITypeRequest(c)#> expand(final String value);

<# } #>
<#          if (c.AsOdcmProperty() != null && c.AsOdcmProperty().IsCollection && canUseTop) { #>
    /**
     * Sets the top value for the request
     *
     * @param value The max number of items to return
     * @return The updated request
     */
    <#=ITypeRequest(c)#> top(final int value);
<#          } #>
<#      } else { #>
    /**
     * Creates the <#=ClassTypeName(c)#>
     *
     * @param callback The callback to be called after success or failure.
     */
    void post(final ICallback<Void> callback);

    /**
     * Creates the <#=ClassTypeName(c)#>
     *
     * @return The <#=ClassTypeName(c)#>
     * @throws ClientException An exception occurs if there was an error while the request was sent.
     */
    void post() throws ClientException;

<#      } #>
<# } else { #>
<#      if (c.AsOdcmMethod().ReturnType != null) { #>
    /**
     * Gets the <#=ClassTypeName(c)#>
     *
     * @param callback The callback to be called after success or failure.
     */
    void get(final ICallback<<#=ClassTypeName(c)#>> callback);

    /**
     * Gets the <#=ClassTypeName(c)#>
     *
     * @return The <#=ClassTypeName(c)#>
     * @throws ClientException An exception occurs if there was an error while the request was sent.
     */
    <#=ClassTypeName(c)#> get() throws ClientException;

<# if (canSelect) { #>
    /**
     * Sets the select clause for the request
     *
     * @param value The select clause
     * @return The updated request
     */
    <#=ITypeRequest(c)#> select(final String value);

<# } #>
<# if (canExpand) { #>
    /**
     * Sets the expand clause for the request
     *
     * @param value The expand clause
     * @return The updated request
     */
    <#=ITypeRequest(c)#> expand(final String value);

<# } #>
<#          if (c.AsOdcmProperty() != null && c.AsOdcmProperty().IsCollection && canUseTop) { #>
    /**
     * Sets the top value for the request
     *
     * @param value The max number of items to return
     * @return The updated request
     */
    <#=ITypeRequest(c)#> top(final int value);
<#          } #>
<#      } else { #>
    void get(final ICallback<Void> callback);

    void get() throws ClientException;

<#      } #>
<# } #>
}
