<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="BaseModel.template.tt"#>
<#@ output extension="\\" #>
<#
    var baseClass = "BaseRequest";
    var typeRequest = TypeRequest(c);
    var iTypeRequest = ITypeRequest(c);
    var baseTypeRequest = BaseTypeRequest(c);
    var iBaseTypeRequest = IBaseTypeRequest(c);
    var returnType = ReturnType(c);

    if (c.AsOdcmMethod().IsCollection)
    {
        baseClass = "BaseCollectionRequest";
        typeRequest = TypeCollectionRequest(c);
        iTypeRequest = ITypeCollectionRequest(c);
        baseTypeRequest = BaseTypeCollectionRequest(c);
        iBaseTypeRequest = IBaseTypeCollectionRequest(c);
    }
#>
<#host.TemplateName = baseTypeRequest;#>
<#
var projection = c.Projection;
var canExpand = projection.SupportsExpand();
var canSelect = projection.BooleanValueOf("Selectable") != false;
var canUseTop = projection.BooleanValueOf("TopSupported") != false;
#>
<#=writer.WriteHeader()#>
<#=CreatePackageDef(host)#>

<#=CreateClassDef(baseTypeRequest, baseClass, iBaseTypeRequest)#>
    protected final <#=TypeBody(c)#> mBody;

    /**
     * The request for this <#=TypeName(c)#>
     *
     * @param requestUrl The request url
     * @param client The service client
     * @param options The options for this request
     */
    public <#=baseTypeRequest#>(final String requestUrl, final <#=IBaseClientType()#> client, final List<Option> options<#=MethodParametersSignature(c)#>) {
        super(requestUrl, client, options, <#=returnType#>.class);
        mBody = new <#=TypeBody(c)#>();
<# foreach (var p in c.AsOdcmMethod().Parameters) { #>
        mBody.<#=ParamName(p)#> = <#=ParamName(p)#>;
<# } #>
    }

    public void post(final ICallback<<#=returnType#>> callback) {
        send(HttpMethod.POST, callback, mBody);
    }

    public <#=returnType#> post() throws ClientException {
        return send(HttpMethod.POST, mBody);
    }

<# if (canSelect) { #>
    /**
     * Sets the select clause for the request
     *
     * @param value The select clause
     * @return The updated request
     */
    public <#=iTypeRequest#> select(final String value) {
        getQueryOptions().add(new QueryOption("select", value));
        return (<#=typeRequest#>)this;
    }

<# } #>
<# if (canUseTop) { #>
    /**
     * Sets the top value for the request
     *
     * @param value The max number of items to return
     * @return The updated request
     */
    public <#=iTypeRequest#> top(final int value) {
        getQueryOptions().add(new QueryOption("top", value+""));
        return (<#=typeRequest#>)this;
    }

<# } #>
<# if (canExpand) { #>
    /**
     * Sets the expand clause for the request
     *
     * @param value The expand clause
     * @return The updated request
     */
    public <#=iTypeRequest#> expand(final String value) {
        getQueryOptions().add(new QueryOption("expand", value));
        return (<#=typeRequest#>)this;
    }

<# } #>
}
