<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="BaseModel.template.tt"#>
<#@ output extension="\\" #>
<#host.TemplateName = BaseTypeCollectionRequest(c);#>
<#=writer.WriteHeader()#>
<#=CreatePackageDef(host)#>

<#=CreateClassDef(BaseTypeCollectionRequest(c),"BaseCollectionRequest" + CollectionRequestGeneric(c), IBaseTypeCollectionRequest(c))#>

<# if (c.AsOdcmMethod().IsAction()) { #>

    protected final <#=TypeBody(c)#> mBody;

<# } #>

    /**
     * The request for this <#=TypeName(c)#>
     *
     * @param requestUrl The request url
     * @param client The service client
     * @param options The options for this request
     */
    public <#=BaseTypeCollectionRequest(c)#>(final String requestUrl, final <#=IBaseClientType()#> client, final List<Option> options<#=MethodParametersSignature(c)#>) {
<# if (c.AsOdcmMethod().ReturnType != null) { #>
        super(requestUrl, client, options, <#=BaseTypeCollectionResponse(c)#>.class, <#=ITypeCollectionPage(c)#>.class);
<# } else { #>
        super(requestUrl, client, options, null);
<# } #>
<# if (c.AsOdcmMethod().IsAction()) { #>
        mBody = new <#=TypeBody(c)#>();
<# foreach (var p in c.AsOdcmMethod().Parameters) { #>
        mBody.<#=ParamName(p)#> = <#=ParamName(p)#>;
<# } #>
<# }else{ #>
<#  foreach (var param in c.AsOdcmMethod().Parameters) { var paramName = ParamName(param);#>
        addFunctionOption(new FunctionOption("<#=paramName#>", <#=paramName#>));
<# } #>
<# } #>
    }

<# if (c.AsOdcmMethod().IsAction()) { #>

    public void post(final ICallback<<#=ITypeCollectionPage(c)#>> callback) {
        final IExecutors executors = getBaseRequest().getClient().getExecutors();
        executors.performOnBackground(new Runnable() {
           @Override
           public void run() {
                try {
                    executors.performOnForeground(post(), callback);
                } catch (final ClientException e) {
                    executors.performOnForeground(e, callback);
                }
           }
        });
    }

    public <#=ITypeCollectionPage(c)#> post() throws ClientException {
<# if (c.AsOdcmMethod().IsAction()) { #>
        final <#=BaseTypeCollectionResponse(c)#> response = post(mBody);
<# } else { #>
        final <#=BaseTypeCollectionResponse(c)#> response = post();
<# } #>
        return buildFromResponse(response);
    }

<# } else { #>

    public void get(final ICallback<<#=ITypeCollectionPage(c)#>> callback) {
        final IExecutors executors = getBaseRequest().getClient().getExecutors();
        executors.performOnBackground(new Runnable() {
           @Override
           public void run() {
                try {
                    executors.performOnForeground(get(), callback);
                } catch (final ClientException e) {
                    executors.performOnForeground(e, callback);
                }
           }
        });
    }

    public <#=ITypeCollectionPage(c)#> get() throws ClientException {
        final <#=BaseTypeCollectionResponse(c)#> response = send();
        return buildFromResponse(response);
    }

<# } #>

    public <#=ITypeCollectionPage(c)#> buildFromResponse(final <#=BaseTypeCollectionResponse(c)#> response) {
        final <#=ITypeCollectionRequestBuilder(c)#> builder;
        if (response.nextLink != null) {
            builder = new <#=TypeCollectionRequestBuilder(c)#>(response.nextLink, getBaseRequest().getClient(), /* options */ null<#=MethodPageValues(c)#>);
        } else {
            builder = null;
        }
        final <#=ITypeCollectionPage(c)#> page = new <#=TypeCollectionPage(c)#>(response, builder);
        page.setRawObject(response.getSerializer(), response.getRawObject());
        return page;
    }

    /**
     * Sets the select clause for the request
     *
     * @param value The select clause
     * @return The updated request
     */
    public <#=ITypeCollectionRequest(c)#> select(final String value) {
        addQueryOption(new QueryOption("select", value));
        return (<#=ITypeCollectionRequest(c)#>)this;
    }

    /**
     * Sets the top value for the request
     *
     * @param value The max number of items to return
     * @return The updated request
     */
    public <#=ITypeCollectionRequest(c)#> top(final int value) {
        addQueryOption(new QueryOption("top", value+""));
        return (<#=ITypeCollectionRequest(c)#>)this;
    }

    /**
     * Sets the expand clause for the request
     *
     * @param value The expand clause
     * @return The updated request
     */
    public <#=ITypeCollectionRequest(c)#> expand(final String value) {
        addQueryOption(new QueryOption("expand", value));
        return (<#=ITypeCollectionRequest(c)#>)this;
    }
}
