<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension="\\" #>
<#
    CustomT4Host host           = (CustomT4Host) Host;
    CodeWriterJavaScript writer = (CodeWriterJavaScript) host.CodeWriter;

    var model                   = host.CurrentModel;
    var entityTypes             = model.GetEntityTypes();
    var entityContainer         = model.EntityContainer;
#>
<#=writer.WriteHeader()#>
EntityType = require './entity_type'
_          = require 'lodash'

module.exports = {}
entityTypesData =
  'microsoft.graph':
    navigationProperties:
<#
  foreach(var prop in entityContainer.Properties)
  {
#>
      <#= prop.Name #>:
        type: '<#= writer.FullTypeName(prop) #>'
<#
  }
#>
<#
  foreach(var entityType in entityTypes)
  {
    var properties    = writer.EntityProperties(entityType);
    var navProperties = writer.EntityNavigationProperties(entityType);
    var methods       = entityType.Methods;
#>
  '<#= entityType.FullName #>':
<#
    if (entityType.IsAbstract)
    {
#>
    abstract: true
<#
    }
    if(entityType.Base != null)
    {
#>
    baseType: '<#= entityType.Base.FullName #>'
<#
    }
    if(entityType.IsOpen)
    {
#>
    openType: true
<#
    }
    if(methods.Any())
    {
#>
    methods:
<#
      foreach(var method in methods)
      {
#>
      <#= method.Name #>:
        requestMethod: '<#= method.Verbs.ToString().ToUpper() #>'
<#
        if(method.ReturnType != null)
        {
          var returnTypeName = method.IsCollection ? "Collection(" + method.ReturnType.FullName + ")" : method.ReturnType.FullName;
#>
        returnType:    '<#= returnTypeName #>'
<#
        }
        if(method.Parameters.Any())
        {
#>
        parameters:
<#
          foreach(var parameter in method.Parameters)
          {
            var parameterTypeName = parameter.IsCollection ? "Collection(" + parameter.Type.FullName + ")" : parameter.Type.FullName;
#>
          <#= parameter.Name #>:
            type: '<#= parameterTypeName #>'
<#
          }
        }
      }
    }
    if(properties.Any())
    {
#>
    properties:
<#
      foreach(var prop in writer.EntityProperties(entityType))
      {
        if(!prop.IsLink)
        {
#>
      <#= prop.Name #>:
        type: '<#= writer.FullTypeName(prop) #>'
<#
          if(prop.IsNullable)
          {
#>
        nullable: true
<#
          }
        }
      }
    }

    if(navProperties.Any())
    {
#>
    navigationProperties:
<#
      foreach(var navProp in navProperties)
      {
        var navPropType = navProp.IsCollection ? "Collection(" + navProp.Type.FullName + ")" : navProp.Type.FullName;
#>
      <#= navProp.Name #>:
        type: '<#= navPropType #>'
<#
        if(navProp.IsNullable)
        {
#>
        nullable: true
<#
        }
        if(navProp.ContainsTarget)
        {
#>
        containsTarget: true
<#
        }
      }
    }
  }
#>

getAllFor = (key, entityName) ->
  entityData = entityTypesData[entityName]
  if entityData.baseType
    _.merge {}, entityData[key], getAllFor(key, entityData.baseType)
  else
    entityData[key]

inheritanceChainFor = (entityName)->
  baseTypeChain = []
  baseType = entityTypesData[entityName].baseType
  while baseType
    baseTypeChain.push baseType
    baseType = entityTypesData[baseType].baseType
  baseTypeChain

completeEntityData = (name) ->
  entityData           = entityTypesData[name]
  properties           = getAllFor('properties', name)
  navigationProperties = getAllFor('navigationProperties', name)
  methods              = getAllFor('methods', name)
  inheritanceChain     = inheritanceChainFor(name)
  _.merge {}, entityData, {properties, navigationProperties, inheritanceChain, methods, name}

_(entityTypesData).keys().forEach (entityName) ->
  module.exports[entityName] = new EntityType completeEntityData(entityName)
