<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension="\\" #>
<#
CustomT4Host host       = (CustomT4Host) Host;
OdcmModel model         = host.CurrentModel;
CodeWriterPHP writer	= (CodeWriterPHP) host.CodeWriter;
OdcmClass entity        = host.CurrentType.AsOdcmClass();
TemplateWriterSettings settings = ConfigurationService.Settings;

#>
<#=writer.WriteHeader(writer.GetDocBlock(entity.Name.ToCheckedCase()))#>
namespace Microsoft\Graph\Model;

<#=writer.GetClassBlock(entity.Name.ToCheckedCase().ToString(), "Model")#>
class <#=entity.Name.ToCheckedCase()#>
{
    /**
    * The array of properties available
    * to the model
    *
    * @var array(string => string)
    */
    private $_propDict;
    /**
    * Construct a new <#=entity.Name.ToUpperFirstChar()#>
    *
    * @param array $propDict A list of properties to set
    */
    function __construct($propDict = array())
    {
        $this->_propDict = $propDict;
    }

    /**
    * Gets the property dictionary of the <#=entity.Name.ToUpperFirstChar()#>
    *
    * @return array The list of properties
    */
    public function getProperties()
    {
        return $this->_propDict;
    }
<# 
        foreach(var property in entity.Properties.Where(prop => prop.Type.GetTypeString() != "bytes")){
            var propertyName = property.Name.ToUnderscore();
            var propertyNameCap = property.Name.ToUpperFirstChar();
            if (property.Type.IsComplex()) {
                if (property.IsCollection()) {
#>

    /** 
    * Gets the <#=property.Name#>
    *
    * @return <#=propertyNameCap#>CollectionPage The <#=property.Name#>
    */
    public function get<#=property.Name.ToCheckedCase()#>()
    {
        if (array_key_exists("<#=property.Name.ToCamelize()#>", $this->_propDict)) {
            return <#=propertyNameCap#>CollectionPage($this->_propDict["<#=property.Name.ToCamelize()#>"]);
        } else {
            return null;
        }
    }

<#
            } else {
#>

    /**
    * Gets the <#=property.Name#>
    *
    * @return <#=property.Type.GetTypeString()#> The <#=property.Name#>
    */
    public function get<#=property.Name.ToCheckedCase()#>()
    {
        if (array_key_exists("<#=property.Name.ToCamelize()#>", $this->_propDict)) {
            if (is_a($this->_propDict["<#=property.Name.ToCamelize()#>"], '<#=property.Type.GetTypeString()#>')) {
                return $this->_propDict["<#=property.Name.ToCamelize()#>"];
            } else {
                $this->_propDict["<#=property.Name.ToCamelize()#>"] = new <#=property.Type.GetTypeString()#>($this->_propDict["<#=property.Name.ToCamelize()#>"]);
                return $this->_propDict["<#=property.Name.ToCamelize()#>"];
            }
        }
        return null;
    }

    /**
    * Sets the <#=property.Name#>
    *
    * @param string $val The <#=property.Name#>
    *
    * @return null
    */
    public function set<#=property.Name.ToCheckedCase()#>($val)
    {
<#  if (property.Type.GetTypeString() == "bool") { #>
        $this->propDict["<#=property.Name#>"] = boolval($val);
<#  } else if (property.Type.GetTypeString() == "int") { #>
        $this->propDict["<#=property.Name#>"] = intval($val);
<# } else { #>
        $this->propDict["<#=property.Name#>"] = $val;
<# } #>
    }
<#
            }
        } else {
#>

    /**
    * Gets the <#=property.Name#>
    *
    * @return <#=property.Type.GetTypeString()#> The <#=property.Name#>
    */
    public function get<#=property.Name.ToCheckedCase()#>()
    {
        if (array_key_exists("<#=property.Name.ToCamelize()#>", $this->_propDict)) {
<#
            if (property.Type.GetTypeString() == "datetime") {
#>
            return new \DateTime($this->_propDict["<#=property.Name.ToCamelize()#>"]);
<#
            } else {
#>
            return $this->_propDict["<#=property.Name.ToCamelize()#>"];
<#
            }
#>
        } else {
            return null;
        }
    }

    /**
    * Sets the <#=property.Name#>
    *
    * @param <#=property.Type.GetTypeString()#> $val The <#=property.Name#>
    *
    * @return null
    */
    public function set<#=property.Name.ToCheckedCase()#>($val)
    {
<#
    if (property.Type.GetTypeString() == "datetime") {
#>
        $this->_propDict["<#=property.Name.ToCamelize()#>"] 
            = $val->format(\DateTime::ISO8601) . "Z";
<#
      } else {
#>
<#  if (property.Type.GetTypeString() == "bool") { #>
        $this->propDict["<#=property.Name#>"] = boolval($val);
<#  } else if (property.Type.GetTypeString() == "int") { #>
        $this->propDict["<#=property.Name#>"] = intval($val);
<# } else { #>
        $this->propDict["<#=property.Name#>"] = $val;
<# } #>
<#
            }
#>
    }
<#
		}
	}
#>
}